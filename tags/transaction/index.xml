<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Transaction on 峰峰的博客</title><link>https://zhaoyifengf.github.io/tags/transaction/</link><description>Recent content in Transaction on 峰峰的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>峰峰</copyright><lastBuildDate>Mon, 10 Feb 2025 22:34:00 +0800</lastBuildDate><atom:link href="https://zhaoyifengf.github.io/tags/transaction/index.xml" rel="self" type="application/rss+xml"/><item><title>Distribution Transaction</title><link>https://zhaoyifengf.github.io/p/distribution-transaction/</link><pubDate>Mon, 10 Feb 2025 22:34:00 +0800</pubDate><guid>https://zhaoyifengf.github.io/p/distribution-transaction/</guid><description>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/cover.png" alt="Featured image of post Distribution Transaction" />&lt;h2 id="分布式事务基本概念">分布式事务基本概念
&lt;/h2>&lt;h3 id="分布式系统架构演进">分布式系统架构演进
&lt;/h3>&lt;h4 id="单体应用架构">单体应用架构
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/single_application.png"
width="1878"
height="1334"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/single_application_hu_ffd7a7cfaf6aad9d.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/single_application_hu_2b84ce9f72f4481d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;p>在单体应用架构下所有功能都被打包成一个服务并部署，这种架构具有如下优点：&lt;/p>
&lt;ul>
&lt;li>架构简单、项目开发和维护成本低&lt;/li>
&lt;li>所有项目部署在一起，方便维护。&lt;/li>
&lt;/ul>
&lt;p>但单体应用架构也存在诸多缺陷：&lt;/p>
&lt;ul>
&lt;li>所有模块耦合在一起，不容易开发和维护（合并分支需要解决冲突，大项目启动事件长）&lt;/li>
&lt;li>项目模块过于耦合，一个模块出问题可能导致整个项目不可用&lt;/li>
&lt;li>无法针对某个具体模块提升性能（所有的模块都部署在一起，无法针对单个模块进行水平扩展）&lt;/li>
&lt;li>无法对项目进行水平扩展（项目大启动时间长，项目部署低效）&lt;/li>
&lt;/ul>
&lt;h4 id="垂直应用架构">垂直应用架构
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/vertical.png"
width="3164"
height="1394"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/vertical_hu_2c665b8799823df.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/vertical_hu_e784192ec73861f2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="544px"
>&lt;/p>
&lt;p>垂直应用架构将系统按照业务领域进行拆分，当有业务领域流量增大只需要针对单个业务领域增加节点，无需对整个项目增加服务器节点。该架构具有如下优点：&lt;/p>
&lt;ul>
&lt;li>可以针对不同系统进行优化&lt;/li>
&lt;li>能够实现水平扩展&lt;/li>
&lt;li>各系统能够分担流量，减小并发度&lt;/li>
&lt;li>系统与系统隔离，单系统出现故障不影响其他系统运行&lt;/li>
&lt;/ul>
&lt;p>垂直应用架构仍然存在如下缺点：&lt;/p>
&lt;ul>
&lt;li>拆分后的系统之间相互独立，无法进行相互调用&lt;/li>
&lt;li>拆分粒度大，重复代码片段多，会出现重复开发与难以维护的问题&lt;/li>
&lt;/ul>
&lt;h4 id="分布式架构">分布式架构
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/distribution.png"
width="2530"
height="1426"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/distribution_hu_4be7df6766fa3a5b.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/distribution_hu_a17af5270c631968.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>分布式架构在垂直架构的基础上，将重复的代码抽出来独立未单独的服务。整个系统被拆分为服务层和表现层，表现层负责处理与页面的交互，服务层则封装了具体的业务逻辑供表现层调用。这种架构具有如下优点：&lt;/p>
&lt;ul>
&lt;li>提高了代码的服用程度，降低了维护成本。&lt;/li>
&lt;li>可以针对服务进行性能优化。&lt;/li>
&lt;/ul>
&lt;p>但该架构具有如下缺点：&lt;/p>
&lt;ul>
&lt;li>系统之间的调用关系变得复杂&lt;/li>
&lt;li>系统之间的依赖关系变得复杂&lt;/li>
&lt;li>系统维护成本变高&lt;/li>
&lt;/ul>
&lt;h5 id="soa架构">SOA架构
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/soa.png"
width="2582"
height="1542"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/soa_hu_e8afb0bf1778327b.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/soa_hu_fb76f0bbe80721d7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>SOA架构引入了注册中心解决了服务依赖与调用关系的自动注册与发现。但这种架构有如下缺点：&lt;/p>
&lt;ul>
&lt;li>各服务间存在依赖关系，如果某个服务出现故障可能会造成服务器崩溃。&lt;/li>
&lt;li>服务间的依赖与调用关系复杂增加了测试和运维成本。&lt;/li>
&lt;/ul>
&lt;h4 id="微服务架构">微服务架构
&lt;/h4>&lt;p>微服务架构与SOA架构相比有如下差异：&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/micro_service.png"
width="1902"
height="1526"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/micro_service_hu_71c3e4f4f1fe463b.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/micro_service_hu_8c6c4b9ca70b6bee.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;ul>
&lt;li>服务大小：在SOA架构中，服务通常是大型的负责多个业务功能；微服务架构中服务负责的功能更具体，通常是某个业务的具体功能。&lt;/li>
&lt;li>数据存储：在SOA架构个中服务共用同一个数据库；微服务每个服务通常拥有自己的数据库。&lt;/li>
&lt;li>通信协议：SOA通常采用SOAP等复杂的通信协议；微服务通常采用REST或gRPC。&lt;/li>
&lt;li>服务协调：SOA通常采用中心话的协调方式如ES；微服务通常采用去中心化的服务方式，如API网关。&lt;/li>
&lt;li>部署方式：SOA通常集中部署；微服务一般进行单独部署。&lt;/li>
&lt;/ul>
&lt;p>在SOA架构中，服务通常是大型的负责多个业务功能，不同服务共用一个数据库，&lt;/p>
&lt;h3 id="分布式事务场景">分布式事务场景
&lt;/h3>&lt;p>一个事务需要多个服务远程协作完成就会产生分布式事务问题，分布式事务会在三种场景下产生，分别是跨JVM进程、跨数据库实例、和多服务访问单数据库。&lt;/p>
&lt;h4 id="跨jvm进程多服务多数据库">跨JVM进程（多服务、多数据库）
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_multi_database.png"
width="1934"
height="842"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_multi_database_hu_b1c6885042a4e017.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_multi_database_hu_59c72ddfb8f6d4a0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>&lt;/p>
&lt;h4 id="跨数据库实例单服务多数据库">跨数据库实例（单服务、多数据库）
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/single_service_multi_database.png"
width="1772"
height="866"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/single_service_multi_database_hu_d69c9f426cb048db.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/single_service_multi_database_hu_3e2a502a0c3f5f9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;h4 id="和多服务访问单数据库多服务单数据库">和多服务访问单数据库（多服务、单数据库）
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_single_database.png"
width="1710"
height="872"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_single_database_hu_42081043b06d7952.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_single_database_hu_79e1fa00358185cb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;h3 id="数据一致性">数据一致性
&lt;/h3>&lt;p>数据一致性问题包含多副本、调用超时、缓存与数据库不一致、多个缓存节点数据不一致等场景。&lt;/p>
&lt;h4 id="调用超时场景">调用超时场景
&lt;/h4>&lt;p>调用超时指的是A服务同步或者异步调用B服务超时，导致A服务与B服务数据不一致。&lt;/p>
&lt;h4 id="缓存与数据库不一致">缓存与数据库不一致
&lt;/h4>&lt;p>在高并发场景下，一些热点数据会缓存到Redis等组件中，此时如果对数据库中的数据进行写操作将会导致缓存中的数据与数据库中的数据不一致。&lt;/p>
&lt;h4 id="多缓存节点数据不一致">多缓存节点数据不一致
&lt;/h4>&lt;p>缓存内部各节点数据不一致，如在Redis集群中，由于网络问题导致多个缓存节点数据不一致。&lt;/p>
&lt;h2 id="分布式事务理论知识">分布式事务理论知识
&lt;/h2>&lt;h3 id="capconsistencyavailabilitypartition-tolerance理论">CAP（Consistency、Availability、Partition Tolerance）理论
&lt;/h3>&lt;p>CAP理论：在分布式系统，不会同时具备CAP三个特性，只能同时具备其中两个。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>一致性&lt;/p>
&lt;p>用户对数据的写操作在所有数据副本要么都成功、要么都失败。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可用性&lt;/p>
&lt;p>客户端访问数据时能够快速得到响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分区容忍性&lt;/p>
&lt;p>分区：分布式系统中不同节点间通信出现了问题。分区容忍：在出现分区时系统仍然能对外提供服务。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="为什么cap只能满足其中两个">为什么CAP只能满足其中两个
&lt;/h3>&lt;p>首先需要明确的是一个分布式系统必需要满足分区容错，也就是CAP中的P。在分布式系统中分区是一定会出现的，没有人能够保证节点与节点之间的网络总是不出问题，也没有人能够保证单个节点始终运行正常。如果一个分布式系统出现分区整个系统就停止服务，那其与单体服务并无区别（分布式系统的初衷就是通过多节点部署来提高系统的可用性）。&lt;/p>
&lt;p>在出现分区的情况下，一致性与可用性只能满足其一：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>若要满足一致性，在对数据的多副本进行写入时需要锁定资源，而出现分区导致无法确认所有副本都写入成功，客户端的访问也无法在有效时间内得到响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若要满足可可用性，对任意节点的访问都需要在指定时间得到响应，当被访问节点数据写入成功而存在节点数据未写入成功或者被访问节点数据未写入成功而其余节点数据写入成功则可用性也无法得到满足。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="basebasically-available-soft-state-eventually-consistent理论">BASE（Basically Available, Soft State， Eventually Consistent）理论
&lt;/h3>&lt;p>当出现分区时，BASE理论允许部分数据不可用，但会保证核心功能可用；允许数据在一定时间内不一致，但经过一段时间数据最终是一致的。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>基本可用&lt;/p>
&lt;p>基本可用指的是分布式系统出现故障时，允许损失部分可用性（比如响应时间或部分功能）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>软状态&lt;/p>
&lt;p>软状态指的是允许系统出现中间状态，但中中间状态不会影响系统的整体可用性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最终一致性&lt;/p>
&lt;p>最终一致性指的是允许允许数据在各个节点存在不一致，只需要数据最终一致。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="分布式事务解决方案">分布式事务解决方案
&lt;/h2>&lt;h3 id="强一致性分布式事务解决方案">强一致性分布式事务解决方案
&lt;/h3>&lt;p>强一致性事务要求任意时刻参与全局事务的各个节点的数据都一致。&lt;/p>
&lt;h3 id="强一致性事务的三种方案">强一致性事务的三种方案
&lt;/h3>&lt;h4 id="全局事务模型dtp">全局事务模型（DTP）
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>基本概念&lt;/p>
&lt;ol>
&lt;li>事务：一个完整的工作单元，具备ACID特性&lt;/li>
&lt;li>全局事务：事务管理器管理的全局事务，能一次操作多个资源管理器&lt;/li>
&lt;li>分支事务：全局事务中的每个资源管理器中独立执行的事务&lt;/li>
&lt;li>控制线程：执行全局事务的线程&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>执行流程
&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/DTP.png"
width="2062"
height="1318"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/DTP_hu_b3948cca0efa30c7.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/DTP_hu_5cd6dfc4815f8b3f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>
DTP模型中的三个核心组件：&lt;/p>
&lt;ul>
&lt;li>AP（应用程序、Application Program）：参与DTP分布式事务模型的应用程序。&lt;/li>
&lt;li>RM（资源管理器、Resource Manager）：数据库管理系统或者消息服务管理器，用来对响应的资源进行有效的控制，相应的资源需要实现XA定义的接口。&lt;/li>
&lt;li>TM（事务管理器、Transaction Manager）：负责协调和管理DTP模型中的事务，为应用程序提供编程接口，同时管理资源管理器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="二阶段提交模型2pc">二阶段提交模型（2PC）
&lt;/h4>&lt;p>2PC模型即两阶段提交协议模型，该模型将事务流程分为Prepare阶段和Commit阶段。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Prepare阶段&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_one.png"
width="1952"
height="886"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_one_hu_3a288a99385f2588.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_one_hu_626339282b73c317.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="528px"
>&lt;/p>
&lt;p>在Prepare阶段，事务管理器给每个参与全局事务的资源管理器发送Prepare消息，资源管理器要么返回失败，要么在本地执行相应的事务，将事务写入本地的Redo Log文件和Undo Log文件，但此时事务并未提交。&lt;/p>
&lt;p>如果在Prepare阶段有资源管理器返回了失败消息则在Commit阶段事务管理器会向其他响应正常消息发送回滚消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commit阶段&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_two.png"
width="1960"
height="938"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_two_hu_23b4684c735e7cc2.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_two_hu_a5a1f7a1a9b0eb90.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="501px"
>&lt;/p>
&lt;p>在2PC的commit阶段，事务管理器向参与全局事务的资源管理器发送commit消息，资源管理器收到消息后提交本地事务并将提交成功的消息返回给事务管理器。&lt;/p>
&lt;h4 id="三阶段提交模型3pc">三阶段提交模型（3PC）
&lt;/h4>&lt;p>相比与2PC模型，3PC模型将prepare阶段分成了CanCommit阶段与PreCommit阶段。&lt;/p>
&lt;ol>
&lt;li>CanCommit阶段&lt;/li>
&lt;/ol>
&lt;p>在CanCommit阶段，事务管理器会向资源管理器发送CanCommit消息，资源管理器如果认为可以执行任务则发送确认消息并进入预备状态。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/can_commit.png"
width="2110"
height="878"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/can_commit_hu_6d123b16b42a5e6e.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/can_commit_hu_f9edcb5f5bbd5b93.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="576px"
>&lt;/p>
&lt;ol start="2">
&lt;li>PreCommit阶段&lt;/li>
&lt;/ol>
&lt;p>在PreCommit阶段，资源管理器接受到消息并写入undo log与redo log。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/prepare_commit.png"
width="2068"
height="880"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/prepare_commit_hu_395697f6622891d2.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/prepare_commit_hu_df04e20e4af037a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="564px"
>&lt;/p>
&lt;ol start="3">
&lt;li>DoCommit阶段&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/do_commit.png"
width="1220"
height="536"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/do_commit_hu_9a6ba7d013a06633.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/do_commit_hu_159389fed0edac17.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;p>在DoCommit阶段，资源管理器收到消息并提交事务。如果超过一定时间资源管理器没有收到事务管理器发送的事务回滚消息则会直接提交事务，如果其资源管理器收到了回滚消息则会导致数据不一致。&lt;/p>
&lt;h3 id="最终一致性的三种解决方案">最终一致性的三种解决方案
&lt;/h3>&lt;p>强一致性方案要求参与事务的各个节点的数据时刻保持一致，在高并发场景下会影响性能。最新一致性方案不要求各个节点的数据始终保持一致，只要数据最终一致即可。&lt;/p>
&lt;h4 id="服务模式">服务模式
&lt;/h4>&lt;h5 id="可查询操作">可查询操作
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/can_search.png"
width="1822"
height="738"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/can_search_hu_84921f3afad800b5.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/can_search_hu_1adc9e2496373c76.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="592px"
>&lt;/p>
&lt;p>可查询操作服务模型要求操作具有唯一标识（唯一业务标识及操作时间）并且要求其他服务在提供操作接口的情况下提供查询接口及批量查询接口，在分布式环境下可以通过查询接口确认操作是否我那次。&lt;/p>
&lt;h5 id="幂等操作">幂等操作
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/mideng.png"
width="1830"
height="752"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/mideng_hu_bbe4fd64a4ff65.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/mideng_hu_798117fffd722c9a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;p>幂等操作要求对于同一个方法相同的参数，操作一次和操作多次的结果相同。在分布式环境下，常常需要重试，而幂等可保证重试对最终结果没有影响。&lt;/p>
&lt;h5 id="tcc操作">TCC操作
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/TCC.png"
width="1842"
height="734"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/TCC_hu_7a0cd62dd82e61a7.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/TCC_hu_81c8334a0b9e2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="602px"
>&lt;/p>
&lt;p>TCC模式包含Try，Commit，Cancel三个阶段。在try阶段完成所有业务的一致性检查、预留必要的业务资源，并需要与其他操作隔离。在Commit执行真正的业务操作。在Cancel释放预留的资源。&lt;/p>
&lt;h5 id="可补偿操作">可补偿操作
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/buchang.png"
width="1842"
height="756"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/buchang_hu_db293dafa06e09db.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/buchang_hu_394ef2ed922d5cb3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;p>在分布式环境下数据可能出现不一致，这时需要通过补偿接口进行补偿。
在分布式环境下数据可能出现不一致，这时需要通过补偿接口进行补偿。&lt;/p>
&lt;h4 id="tcc-方案">TCC 方案
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/TCC_solver.png"
width="1176"
height="1226"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/TCC_solver_hu_9c20bd76c6d5744a.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/TCC_solver_hu_eedf5a083174a9af.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="230px"
>&lt;/p>
&lt;ol>
&lt;li>Try阶段&lt;/li>
&lt;/ol>
&lt;p>在 Try 阶段在具体的业务数据进行修改操作并标记状态为待提交，并记录此阶段的反向操作（如增加多少库存）&lt;/p>
&lt;ol start="2">
&lt;li>Confirm阶段&lt;/li>
&lt;/ol>
&lt;p>如果 Try 阶段执行全部成功，则将待提交状态标记为提交状态并取消反向操作。&lt;/p>
&lt;ol start="3">
&lt;li>Cancel阶段&lt;/li>
&lt;/ol>
&lt;p>标记操作的具体业务数据状态为取消，并对业务数据进行反向操作，清除具体的反向操作。&lt;/p>
&lt;h4 id="可靠消息最终一致性解决方案">可靠消息最终一致性解决方案
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message.png"
width="1192"
height="1546"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message_hu_54a177ce922903f8.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message_hu_4e3b6304d745854d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/p>
&lt;p>事务发起方发送可靠消息，事务参与方从可靠消息服务接收消息。由于事务发起方和可靠消息服务、可靠消息服务和事务参与方之间都是通过网络进行通信的，所以需要引入消息确认服务和消息回复服务。&lt;/p>
&lt;p>消息确认服务会定期检测事务发起方业务的执行状态和消息库中的数据，如果发现事务发起方业务的执行状态与消息库中的数据不一致，消息确认服务就会同步事务发起方的业务数据和消息库中的数据，保证数据一致性。&lt;/p>
&lt;p>消息恢复服务会定期检测事务参与方业务执行状态与消息库中数据是否一致，如果发现不一致则回滚消息状态为事务发起方发送消息但未被事务参与方消费的状态。&lt;/p>
&lt;h4 id="最大努力通知型解决方案">最大努力通知型解决方案
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/try_best.png"
width="1216"
height="1552"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/try_best_hu_5c7759c95da3655e.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/try_best_hu_18e92a0e28e72159.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="188px"
>&lt;/p>
&lt;p>业务方在完成业务处理后，会向业务参与方发送消息，发送消息时通知时运行消息丢失。业务方需要体统查询接口供业务接收方按需查询，用于恢复丢失的消息。&lt;/p>
&lt;h2 id="分布式事务原理">分布式事务原理
&lt;/h2>&lt;h3 id="可靠消息分布式事务">可靠消息分布式事务
&lt;/h3>&lt;h4 id="可靠消息的三个角色">可靠消息的三个角色
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/basic_schematic_diagram.png"
width="1906"
height="270"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/basic_schematic_diagram_hu_75820c880402cac.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/basic_schematic_diagram_hu_829199db02b924c1.png 1024w"
loading="lazy"
alt="工作方式"
class="gallery-image"
data-flex-grow="705"
data-flex-basis="1694px"
>&lt;/p>
&lt;p>三个角色与对应职责：&lt;/p>
&lt;ul>
&lt;li>事务参与方：执行事务并发送消息（在诸如RocketMQ等独立消息服务不需要事务参与方保证消息投递与事务提交满足原子性）&lt;/li>
&lt;li>独立消息服务：在出现分区的情况下保证 1. 若事务发起方事务执行状态与可靠消息中间事务消息提交状态一致 2. 独立消息服务消息消费状态与消费者消费状态一致&lt;/li>
&lt;li>消息消费者：事务执行失败能正确通知事务参与方回滚事务&lt;/li>
&lt;/ul>
&lt;p>两条链路：&lt;/p>
&lt;ul>
&lt;li>事务提交链路：事务发起方 -&amp;gt; 独立消息服务 -&amp;gt; 事务参与方&lt;/li>
&lt;li>事务回滚链路：事务参与方 -&amp;gt; 独立消息服务 -&amp;gt; 事务发起方&lt;/li>
&lt;/ul>
&lt;p>在诸如RocketMQ等独立消息服务中只保证事务发起方事务执行与事务参与方消息消费一致但并保证事务参与方事务执行结果与事务参与方消息消费结果一致，即其只提供了事务提交链路的一致，事务回滚链路的一致需要手动保证。&lt;/p>
&lt;h4 id="各个角色实现任务的难点">各个角色实现任务的难点
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>事务参与方如何保证事务提交与消息投递是原子操作&lt;/p>
&lt;ul>
&lt;li>
&lt;p>先发消息&lt;/p>
&lt;ul>
&lt;li>执行事务前发消息：消息发送成功但事务执行失败，只回滚了事务并没有实现消息发送和写库都执行失败或者都执行成功。如果消息接收方通过接口回调来确认消息状态，在读已提交和可重复读的隔离级别下设置回调时间过短可能导致没有正确获取到事务的执行状态。&lt;/li>
&lt;li>执行事务时发送消息：在写库完成前发送消息可能会出现消息发送成功，但写库失败的场景。在网络波动是，发送消息等待响应时间长，会阻塞事务执行，影响系统安全。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>先写库&lt;/p>
&lt;ul>
&lt;li>执行事务后发送消息：在提交事务后设置回调发送消息，单事务已提交，消息可能发送失败。&lt;/li>
&lt;li>事务执行时发送消息：在写库完成后发送消息，发送消息失败则回滚。在网络波动时，发送消息等待响应时间长，会阻塞事务执行，影响系统安全。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>上面的两种方式还可按照 在事务内发消息还是在事务外发消息划分，二者各有如下缺点&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在事务内发消息&lt;/p>
&lt;p>在事务内发消息，在网络超时，生产者重试，可能阻塞事务导致死锁等问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在事务外发消息&lt;/p>
&lt;p>难以保证事务执行成功消息提交成功是原子操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>独立消息服务平台如何保 消息状态正确&lt;/p>
&lt;ul>
&lt;li>如何保证事务发起方事务执行状态与消息状态一致
在网络超时时，事务发起方认为消息发送失败，但消息可能投递成功，导致事务参与方与事务发起方状态不一致。&lt;/li>
&lt;li>如何事务参与方消息消费状态与消息状态一致
在网络波动时，消费者没有在指定时间返回消息处理状态，独立消息服务错误地将消息消费状态标记为失败。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在事务内发送消息会影响数据安全是必须要避免的，现在需要解决的问题是如何在事务外发送消息的情况下保证： 发送消息成功、提交事务、投递消息成功、消费消息成功要么全做要么全不做。&lt;/p>
&lt;h4 id="本地消息表">本地消息表
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>工作过程&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务发起方提交事务&lt;/p>
&lt;p>事务发起方在写业务数据时向本地消息表也写一份数据用于记录需要发送的消息，并且将两个写操作放在一个事务中保证业务数据写操作与本地消息表的记录要么全做要么全不做。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务发起方发送消息&lt;/p>
&lt;p>使用定时任务不断扫描本地消息表，发送消息至消息中间件，如果消息没有发送成功则会不断重试，在重试一定次数仍然失败之后则会把消息放入实信对列，之后进行人工干预。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务参与方接收消息并消费&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/local_message_table.png"
width="2576"
height="1146"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/local_message_table_hu_57d9d018cd88b3be.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/local_message_table_hu_4562c9badd2a555a.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="539px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>各角设如何保证完成自己的任务&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务发起方如何保证提交事务和发送消息是一个原子操作&lt;/p>
&lt;p>本地消息表将写业务数据与写本地消息表放在一个事务里，保证这两个操作能同时执行，此外通过不断重试消息并引入人工处理来保证消息一定能够发送并被消费者消费。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消息中间件如何保证成功返回消息消费状态&lt;/p>
&lt;p>事务参与方提交事务失败时发送一个消息给事务发起方通知其回滚消息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>优点&lt;/p>
&lt;ul>
&lt;li>本地消息表是业界内比较成熟的方案，可靠性高。&lt;/li>
&lt;li>本地消息表实现了数据的最终一致性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>缺点&lt;/p>
&lt;ul>
&lt;li>可靠消息保证与业务代码耦合，需要额外开发定时任务等逻辑。&lt;/li>
&lt;li>可靠消息保证的相关逻辑无法复用，需要重复开发。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>注意点&lt;/p>
&lt;ul>
&lt;li>事务提交后需要保证消息一定投递成功，可能会频繁重试，事务参与方需要保证消息的幂等。&lt;/li>
&lt;li>事务参与方通过消息投递通知事务发起方回滚，事务参与方也需要保证消息可靠投递。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="独立消息服务">独立消息服务
&lt;/h4>&lt;p>独立消息服务的三个角色：&lt;/p>
&lt;ul>
&lt;li>可靠消息服务：负责消息状态维护、消息接收与投递&lt;/li>
&lt;li>消息确认服务：负责保障消息投递方与可靠消息服务中的消息状态一致&lt;/li>
&lt;li>消息恢复服务：用于保障事务参与方消费状态与可靠消息服务中的消息状态一致&lt;/li>
&lt;/ul>
&lt;p>独立消息服务将本地消息表中可靠消息保证的逻辑抽离成独立服务并进行了增强，其工作步骤如下：&lt;/p>
&lt;ul>
&lt;li>事务发起方发送Half消息至可靠消息服务，发送成功后执行本地事务。&lt;/li>
&lt;li>可靠消息服务接收到消息后存储到消息库中并将消息状态标记为“待发送”但不会立即发送消息至消息中间件。&lt;/li>
&lt;li>事务执行成功或失败后事务发起方向可靠消息服务发送确认消息。&lt;/li>
&lt;li>可靠消息服务接收到事务发起方投递消息，若收到确认消息则将消息发送至中间件并将消息状态标记为已发送；若收到取消消息则将消息库中保存的消息标记为已删除。&lt;/li>
&lt;li>消息中间件投递消息至事务参与方，事务参与方接收消息并将处理结果返回给消息中间件。&lt;/li>
&lt;li>消息中间件将消费结果投递至可靠消息服务，可靠消息服务接收到确认消息将消息状态标记为已完成。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message.png"
width="1192"
height="1546"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message_hu_54a177ce922903f8.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message_hu_4e3b6304d745854d.png 1024w"
loading="lazy"
alt="可靠消息"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>各个角色如何保证完成自己的任务&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务发起方如何保证提交事务和发送消息是一个原子操作&lt;/p>
&lt;ul>
&lt;li>执行事务前发送消息失败：发送消息失败事务发起方不会提交事务，如果因网络超时事务发起方发送事务成功但没有收到正确响应，可靠消息服务没有接收到确认消息也不会向事务产生方投递消息。&lt;/li>
&lt;li>执行事务成功如何确保发送确认消息成功：执行事务成功，消息发送失败事务发起方与事务参与方状态不一致，消息确认服务会不断校对事务发起方和消息库中消息的状态，发现不一致时会进行校对。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>独立消息服务如何确保证消息状态与事务发起方事务执行状态与事务消费方消费状态一致&lt;/p>
&lt;ul>
&lt;li>消息与事务发起方状态一致：消息确认服务会不断地对事务发起方事务的执行状态和消息库中消息的状态进行校准。&lt;/li>
&lt;li>消息与事务参与方状态一致：可靠消息服务会重试消息投递，重试失败后会由消息恢复服务定时重试。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>一点讨论&lt;/p>
&lt;ul>
&lt;li>独立消息服务一般只保证事务提交链路的一致性，因此可靠消息服务需要确保 若事务发起方提交事务则事务参与方一定能消费消息，可靠消息服务是通过一定次数的重试来实现的。&lt;/li>
&lt;li>独立消息服务包含了一个假设：按照指定规则经过一定次数重试事务参与方一定能消费消息成功。这个假设一般都是成了的，网络波动或者消息者自身问题消费消息失败都是偶然的，通过一定规则重试是能保证消息消费成功的。&lt;/li>
&lt;li>可靠消息能保证最终一致性：在事务参与方提交事务后即时独立消息服务或消息消费服务宕机，重启服务后独立消息服务通过消息确认服务与消息回复服务也能保证消息的最终一致性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="rocketmq事务消息">RocketMQ事务消息
&lt;/h4>&lt;p>RocketMQ工提供了事务消息，工作过程与独立消息服务基本一致，下面我们通过代码来学习RocketMQ事务消息。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/rocketMQ.png"
width="2190"
height="1562"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/rocketMQ_hu_f6b754b330472f2.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/rocketMQ_hu_60fa7ce01c04dd2d.png 1024w"
loading="lazy"
alt="Rocket MQ"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>&lt;/p>
&lt;p>假设我们有一个商场业务下单扣减库存的场景，订单微服务和库存微服务分别部署，订单微服务在生成订单后需要通知库存微服务扣减库存。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/image.png"
width="1580"
height="230"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/image_hu_8d7074cd9174afdd.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/image_hu_30ce26defe17c699.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="686"
data-flex-basis="1648px"
>&lt;/p>
&lt;p>总共涉及到三张表，order表用来存储订单数据，stock表用来存储库存数据，tx_log表用来记录事务。
&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/order.png"
width="2572"
height="646"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/order_hu_fe6f7bb4cd33a53d.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/order_hu_7d31bbb803bb016c.png 1024w"
loading="lazy"
alt="order表"
class="gallery-image"
data-flex-grow="398"
data-flex-basis="955px"
>
&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/stock.png"
width="2584"
height="424"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/stock_hu_b4a883d7d36db2b8.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/stock_hu_590844ca6146851c.png 1024w"
loading="lazy"
alt="stock表"
class="gallery-image"
data-flex-grow="609"
data-flex-basis="1462px"
>
&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/tx_log.png"
width="2576"
height="330"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/tx_log_hu_8c2fc9346cb7bf08.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/tx_log_hu_9e9c5acf462a39aa.png 1024w"
loading="lazy"
alt="tx_log表"
class="gallery-image"
data-flex-grow="780"
data-flex-basis="1873px"
>&lt;/p>
&lt;p>工作过程如下&lt;/p>
&lt;ul>
&lt;li>订单服务需要在执行事务前发送Half消息至RocketMQ并在RocketMQ成功接收到消息后提交事务并发送确认消息到RocketMQ&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">OrderService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">OrderMapper&lt;/span> &lt;span class="n">orderMapper&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RocketMQTemplate&lt;/span> &lt;span class="n">rocketMQTemplate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Transactional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rollbackFor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">submitOrderAndSaveTxNo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TxMessage&lt;/span> &lt;span class="n">txMessage&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Integer&lt;/span> &lt;span class="n">existsTx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">orderMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isExistsTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxNo&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">existsTx&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;订单微服务已经执行过事务,商品id为:{}，事务编号为:{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ProductId&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxNo&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">生成订单&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Order&lt;/span> &lt;span class="n">order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">Order&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setCreateTime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setOrderNo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setPayCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPayCount&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setProductId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getProductId&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">orderMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">saveOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">添加事务日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">orderMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">saveTxLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxNo&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">submitOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">productId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">payCount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">生成全局分布式序列号&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">String&lt;/span> &lt;span class="n">txNo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UUID&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randomUUID&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TxMessage&lt;/span> &lt;span class="n">txMessage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">TxMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">productId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payCount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">txNo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JSONObject&lt;/span> &lt;span class="n">jsonObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">JSONObject&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">jsonObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;txMessage&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">txMessage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Message&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="ne">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MessageBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">withPayload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">JSONString&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">发送一条事务消息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rocketMQTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendMessageInTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tx_order_group&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;topic_txmsg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>RocketMQ在接收到订单服务的半消息后需要通知订单服务，此外在订单服务发送事务提交消息至RocketMQ失败后RocketMQ需要不断校验事务发起方状态.&lt;/li>
&lt;/ul>
&lt;p>RocketMQ提供了RocketMQLocalTransactionListener类，executeLocalTransaction方法会在事务发送方法发送消息成功后被回调，在该方法内执行时服务发送方的提交事务逻辑并提交事务提交消息至RocketMQ。这里需要注意，事务提交的逻辑和发送事务提交消息的逻辑并不再一个方法里。&lt;/p>
&lt;p>ROcketMQ还提供了checkLocalTransaction方法用于检查事务提交方的状态，避免事务消息发送失败导致的事务发起方和参与方状态不一致。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">RocketMQTransactionListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txProducerGroup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;tx_order_group&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">OrderTxMessageListener&lt;/span> &lt;span class="n">implements&lt;/span> &lt;span class="n">RocketMQLocalTransactionListener&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">OrderService&lt;/span> &lt;span class="n">orderService&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">OrderMapper&lt;/span> &lt;span class="n">orderMapper&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Transactional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rollbackFor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span> &lt;span class="n">executeLocalTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Message&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">try&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="s2">&amp;#34;订单微服务执行本地事务&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TxMessage&lt;/span> &lt;span class="n">txMessage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">执行本地事务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">orderService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submitOrderAndSaveTxNo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">提交事务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="s2">&amp;#34;订单微服务提交事务&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">printStackTrace&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">异常回滚事务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="s2">&amp;#34;订单微服务回滚事务&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ROLLBACK&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span> &lt;span class="n">checkLocalTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Message&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="s2">&amp;#34;订单微服务查询本地事务&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TxMessage&lt;/span> &lt;span class="n">txMessage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Integer&lt;/span> &lt;span class="n">exists&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">orderMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isExistsTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxNo&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exists&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">UNKNOWN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">TxMessage&lt;/span> &lt;span class="n">getTxMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Message&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">String&lt;/span> &lt;span class="n">messageString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="ne">String&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">byte&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPayload&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JSONObject&lt;/span> &lt;span class="n">jsonObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parseObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">messageString&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">String&lt;/span> &lt;span class="n">txStr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jsonObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;txMessage&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">JSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parseObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txStr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TxMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>库存微服务逻辑相对简单，只需消息消息即可&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@Component
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@RocketMQMessageListener(consumerGroup = &amp;#34;tx_stock_group&amp;#34;, topic = &amp;#34;topic_txmsg&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class StockTxMessageConsumer implements RocketMQListener&amp;lt;String&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private StockService stockService;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onMessage(String message) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.info（&amp;#34;库存微服务开始消费事务消息:{}&amp;#34;, message）;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TxMessage txMessage = this.getTxMessage(message);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stockService.decreaseStock(txMessage);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private TxMessage getTxMessage(String msg){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> JSONObject jsonObject = JSONObject.parseObject(msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String txStr = jsonObject.getString(&amp;#34;txMessage&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return JSONObject.parseObject(txStr, TxMessage.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@Service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class StockService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private StockMapper stockMapper;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void decreaseStock(TxMessage txMessage) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.info(&amp;#34;库存微服务执行本地事务,商品id:{}, 购买数量:{}&amp;#34;, txMessage.getProductId(), txMessage.getPayCount());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //检查是否执行过事务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Integer exists = stockMapper.isExistsTx(txMessage.getTxNo());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(exists != null){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.info(&amp;#34;库存微服务已经执行过事务,事务编号为:{}&amp;#34;, txMessage.getTxNo());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Stock stock = stockMapper.getStockByProductId(txMessage.getProductId());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(stock.getTotalCount() &amp;lt; txMessage.getPayCount()){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> throw new RuntimeException（&amp;#34;库存不足&amp;#34;）;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stockMapper.updateTotalCountById(txMessage.getPayCount(), stock.getId());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //记录事务日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stockMapper.saveTxLog(txMessage.getTxNo());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="最大努力通知型分布式事务">最大努力通知型分布式事务
&lt;/h3>&lt;h4 id="适用场景">适用场景
&lt;/h4>&lt;ul>
&lt;li>允许丢失消息&lt;/li>
&lt;li>事务发起方需要提供接口让事务参与回查进行数据校准&lt;/li>
&lt;li>事务参与方的结果不影响事务发起方的结果&lt;/li>
&lt;li>对消息实时性要求不高&lt;/li>
&lt;/ul>
&lt;h4 id="工作过程">工作过程
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/try_best_yuanli.png"
width="1966"
height="1668"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/try_best_yuanli_hu_bfe5af09a2f79374.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/try_best_yuanli_hu_a18f08b75f59f8ad.png 1024w"
loading="lazy"
alt="最大努力通知型分布式事务"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="282px"
>&lt;/p>
&lt;ol>
&lt;li>事务参与方执行事务后发送消息&lt;/li>
&lt;li>消息中间件接收消息后将消息标记为待发送&lt;/li>
&lt;li>消息中间件向事务参与方投递消息&lt;/li>
&lt;/ol>
&lt;h4 id="业务场景">业务场景
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>业务场景&lt;/th>
&lt;th>场景描述&lt;/th>
&lt;th>特点与适用条件&lt;/th>
&lt;th>示例说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>支付成功通知商户&lt;/td>
&lt;td>用户支付成功后，支付平台需通知商户系统发货或履约&lt;/td>
&lt;td>支付成功事件已在支付系统本地提交，通知为异步重试多次，允许因网络或系统原因有延迟，但要求最终送达或人工处理&lt;/td>
&lt;td>微信支付/支付宝在支付回调失败时，会间隔多次重试通知商户接口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>订单状态变更通知&lt;/td>
&lt;td>电商平台订单状态变化（已发货/已收货）需要通知物流、会员积分等系统&lt;/td>
&lt;td>状态变化事件已写入订单库，不阻塞交易主流程，通过消息或HTTP回调多次发送&lt;/td>
&lt;td>物流同步接口失败会隔一段时间重试，多数场景允许几分钟内延迟同步&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>异步库存同步&lt;/td>
&lt;td>核心交易系统与库存系统解耦，交易成功后通知库存系统扣减&lt;/td>
&lt;td>交易已完成且不可逆，通知可延迟执行，通过补偿或定时任务保证一致性&lt;/td>
&lt;td>生鲜电商交易完成后，库存系统可能因网络抖动导致同步延迟&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>用户行为上报&lt;/td>
&lt;td>APP端关键行为（观看、点击、分享）发送到埋点分析系统&lt;/td>
&lt;td>埋点数据允许丢失少量信息，但希望尽量多送达，提高数据准确度&lt;/td>
&lt;td>行为日志先入本地队列，后台重试发送到数据平台&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>发票开具通知&lt;/td>
&lt;td>用户付款后通知财税系统开具电子发票&lt;/td>
&lt;td>可以异步通知，避免交易阻塞，财税接口短时不可用时可多次重试&lt;/td>
&lt;td>第三方发票平台偶尔超时，异步通知能显著提升整体体验&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>
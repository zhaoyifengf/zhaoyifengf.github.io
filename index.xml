<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>峰峰的博客</title><link>https://zhaoyifengf.github.io/</link><description>Recent content on 峰峰的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>峰峰</copyright><lastBuildDate>Mon, 23 Jun 2025 23:26:52 +0800</lastBuildDate><atom:link href="https://zhaoyifengf.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Distribution Transaction</title><link>https://zhaoyifengf.github.io/p/distribution-transaction/</link><pubDate>Mon, 10 Feb 2025 22:34:00 +0800</pubDate><guid>https://zhaoyifengf.github.io/p/distribution-transaction/</guid><description>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/cover.png" alt="Featured image of post Distribution Transaction" />&lt;h2 id="分布式事务基本概念">分布式事务基本概念
&lt;/h2>&lt;h3 id="分布式系统架构演进">分布式系统架构演进
&lt;/h3>&lt;h4 id="单体应用架构">单体应用架构
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/single_application.png"
width="1878"
height="1334"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/single_application_hu_ffd7a7cfaf6aad9d.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/single_application_hu_2b84ce9f72f4481d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;p>在单体应用架构下所有功能都被打包成一个服务并部署，这种架构具有如下优点：&lt;/p>
&lt;ul>
&lt;li>架构简单、项目开发和维护成本低&lt;/li>
&lt;li>所有项目部署在一起，方便维护。&lt;/li>
&lt;/ul>
&lt;p>但单体应用架构也存在诸多缺陷：&lt;/p>
&lt;ul>
&lt;li>所有模块耦合在一起，不容易开发和维护（合并分支需要解决冲突，大项目启动事件长）&lt;/li>
&lt;li>项目模块过于耦合，一个模块出问题可能导致整个项目不可用&lt;/li>
&lt;li>无法针对某个具体模块提升性能（所有的模块都部署在一起，无法针对单个模块进行水平扩展）&lt;/li>
&lt;li>无法对项目进行水平扩展（项目大启动时间长，项目部署低效）&lt;/li>
&lt;/ul>
&lt;h4 id="垂直应用架构">垂直应用架构
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/vertical.png"
width="3164"
height="1394"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/vertical_hu_2c665b8799823df.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/vertical_hu_e784192ec73861f2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="544px"
>&lt;/p>
&lt;p>垂直应用架构将系统按照业务领域进行拆分，当有业务领域流量增大只需要针对单个业务领域增加节点，无需对整个项目增加服务器节点。该架构具有如下优点：&lt;/p>
&lt;ul>
&lt;li>可以针对不同系统进行优化&lt;/li>
&lt;li>能够实现水平扩展&lt;/li>
&lt;li>各系统能够分担流量，减小并发度&lt;/li>
&lt;li>系统与系统隔离，单系统出现故障不影响其他系统运行&lt;/li>
&lt;/ul>
&lt;p>垂直应用架构仍然存在如下缺点：&lt;/p>
&lt;ul>
&lt;li>拆分后的系统之间相互独立，无法进行相互调用&lt;/li>
&lt;li>拆分粒度大，重复代码片段多，会出现重复开发与难以维护的问题&lt;/li>
&lt;/ul>
&lt;h4 id="分布式架构">分布式架构
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/distribution.png"
width="2530"
height="1426"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/distribution_hu_4be7df6766fa3a5b.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/distribution_hu_a17af5270c631968.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>分布式架构在垂直架构的基础上，将重复的代码抽出来独立未单独的服务。整个系统被拆分为服务层和表现层，表现层负责处理与页面的交互，服务层则封装了具体的业务逻辑供表现层调用。这种架构具有如下优点：&lt;/p>
&lt;ul>
&lt;li>提高了代码的服用程度，降低了维护成本。&lt;/li>
&lt;li>可以针对服务进行性能优化。&lt;/li>
&lt;/ul>
&lt;p>但该架构具有如下缺点：&lt;/p>
&lt;ul>
&lt;li>系统之间的调用关系变得复杂&lt;/li>
&lt;li>系统之间的依赖关系变得复杂&lt;/li>
&lt;li>系统维护成本变高&lt;/li>
&lt;/ul>
&lt;h5 id="soa架构">SOA架构
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/soa.png"
width="2582"
height="1542"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/soa_hu_e8afb0bf1778327b.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/soa_hu_fb76f0bbe80721d7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>SOA架构引入了注册中心解决了服务依赖与调用关系的自动注册与发现。但这种架构有如下缺点：&lt;/p>
&lt;ul>
&lt;li>各服务间存在依赖关系，如果某个服务出现故障可能会造成服务器崩溃。&lt;/li>
&lt;li>服务间的依赖与调用关系复杂增加了测试和运维成本。&lt;/li>
&lt;/ul>
&lt;h4 id="微服务架构">微服务架构
&lt;/h4>&lt;p>微服务架构与SOA架构相比有如下差异：&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/micro_service.png"
width="1902"
height="1526"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/micro_service_hu_71c3e4f4f1fe463b.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/micro_service_hu_8c6c4b9ca70b6bee.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;ul>
&lt;li>服务大小：在SOA架构中，服务通常是大型的负责多个业务功能；微服务架构中服务负责的功能更具体，通常是某个业务的具体功能。&lt;/li>
&lt;li>数据存储：在SOA架构个中服务共用同一个数据库；微服务每个服务通常拥有自己的数据库。&lt;/li>
&lt;li>通信协议：SOA通常采用SOAP等复杂的通信协议；微服务通常采用REST或gRPC。&lt;/li>
&lt;li>服务协调：SOA通常采用中心话的协调方式如ES；微服务通常采用去中心化的服务方式，如API网关。&lt;/li>
&lt;li>部署方式：SOA通常集中部署；微服务一般进行单独部署。&lt;/li>
&lt;/ul>
&lt;p>在SOA架构中，服务通常是大型的负责多个业务功能，不同服务共用一个数据库，&lt;/p>
&lt;h3 id="分布式事务场景">分布式事务场景
&lt;/h3>&lt;p>一个事务需要多个服务远程协作完成就会产生分布式事务问题，分布式事务会在三种场景下产生，分别是跨JVM进程、跨数据库实例、和多服务访问单数据库。&lt;/p>
&lt;h4 id="跨jvm进程多服务多数据库">跨JVM进程（多服务、多数据库）
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_multi_database.png"
width="1934"
height="842"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_multi_database_hu_b1c6885042a4e017.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_multi_database_hu_59c72ddfb8f6d4a0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="229"
data-flex-basis="551px"
>&lt;/p>
&lt;h4 id="跨数据库实例单服务多数据库">跨数据库实例（单服务、多数据库）
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/single_service_multi_database.png"
width="1772"
height="866"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/single_service_multi_database_hu_d69c9f426cb048db.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/single_service_multi_database_hu_3e2a502a0c3f5f9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;h4 id="和多服务访问单数据库多服务单数据库">和多服务访问单数据库（多服务、单数据库）
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_single_database.png"
width="1710"
height="872"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_single_database_hu_42081043b06d7952.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/multi_service_single_database_hu_79e1fa00358185cb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;h3 id="数据一致性">数据一致性
&lt;/h3>&lt;p>数据一致性问题包含多副本、调用超时、缓存与数据库不一致、多个缓存节点数据不一致等场景。&lt;/p>
&lt;h4 id="调用超时场景">调用超时场景
&lt;/h4>&lt;p>调用超时指的是A服务同步或者异步调用B服务超时，导致A服务与B服务数据不一致。&lt;/p>
&lt;h4 id="缓存与数据库不一致">缓存与数据库不一致
&lt;/h4>&lt;p>在高并发场景下，一些热点数据会缓存到Redis等组件中，此时如果对数据库中的数据进行写操作将会导致缓存中的数据与数据库中的数据不一致。&lt;/p>
&lt;h4 id="多缓存节点数据不一致">多缓存节点数据不一致
&lt;/h4>&lt;p>缓存内部各节点数据不一致，如在Redis集群中，由于网络问题导致多个缓存节点数据不一致。&lt;/p>
&lt;h2 id="分布式事务理论知识">分布式事务理论知识
&lt;/h2>&lt;h3 id="capconsistencyavailabilitypartition-tolerance理论">CAP（Consistency、Availability、Partition Tolerance）理论
&lt;/h3>&lt;p>CAP理论：在分布式系统，不会同时具备CAP三个特性，只能同时具备其中两个。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>一致性&lt;/p>
&lt;p>用户对数据的写操作在所有数据副本要么都成功、要么都失败。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可用性&lt;/p>
&lt;p>客户端访问数据时能够快速得到响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分区容忍性&lt;/p>
&lt;p>分区：分布式系统中不同节点间通信出现了问题。分区容忍：在出现分区时系统仍然能对外提供服务。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="为什么cap只能满足其中两个">为什么CAP只能满足其中两个
&lt;/h3>&lt;p>首先需要明确的是一个分布式系统必需要满足分区容错，也就是CAP中的P。在分布式系统中分区是一定会出现的，没有人能够保证节点与节点之间的网络总是不出问题，也没有人能够保证单个节点始终运行正常。如果一个分布式系统出现分区整个系统就停止服务，那其与单体服务并无区别（分布式系统的初衷就是通过多节点部署来提高系统的可用性）。&lt;/p>
&lt;p>在出现分区的情况下，一致性与可用性只能满足其一：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>若要满足一致性，在对数据的多副本进行写入时需要锁定资源，而出现分区导致无法确认所有副本都写入成功，客户端的访问也无法在有效时间内得到响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若要满足可可用性，对任意节点的访问都需要在指定时间得到响应，当被访问节点数据写入成功而存在节点数据未写入成功或者被访问节点数据未写入成功而其余节点数据写入成功则可用性也无法得到满足。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="basebasically-available-soft-state-eventually-consistent理论">BASE（Basically Available, Soft State， Eventually Consistent）理论
&lt;/h3>&lt;p>当出现分区时，BASE理论允许部分数据不可用，但会保证核心功能可用；允许数据在一定时间内不一致，但经过一段时间数据最终是一致的。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>基本可用&lt;/p>
&lt;p>基本可用指的是分布式系统出现故障时，允许损失部分可用性（比如响应时间或部分功能）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>软状态&lt;/p>
&lt;p>软状态指的是允许系统出现中间状态，但中中间状态不会影响系统的整体可用性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最终一致性&lt;/p>
&lt;p>最终一致性指的是允许允许数据在各个节点存在不一致，只需要数据最终一致。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="分布式事务解决方案">分布式事务解决方案
&lt;/h2>&lt;h3 id="强一致性分布式事务解决方案">强一致性分布式事务解决方案
&lt;/h3>&lt;p>强一致性事务要求任意时刻参与全局事务的各个节点的数据都一致。&lt;/p>
&lt;h3 id="强一致性事务的三种方案">强一致性事务的三种方案
&lt;/h3>&lt;h4 id="全局事务模型dtp">全局事务模型（DTP）
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>基本概念&lt;/p>
&lt;ol>
&lt;li>事务：一个完整的工作单元，具备ACID特性&lt;/li>
&lt;li>全局事务：事务管理器管理的全局事务，能一次操作多个资源管理器&lt;/li>
&lt;li>分支事务：全局事务中的每个资源管理器中独立执行的事务&lt;/li>
&lt;li>控制线程：执行全局事务的线程&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>执行流程
&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/DTP.png"
width="2062"
height="1318"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/DTP_hu_b3948cca0efa30c7.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/DTP_hu_5cd6dfc4815f8b3f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>
DTP模型中的三个核心组件：&lt;/p>
&lt;ul>
&lt;li>AP（应用程序、Application Program）：参与DTP分布式事务模型的应用程序。&lt;/li>
&lt;li>RM（资源管理器、Resource Manager）：数据库管理系统或者消息服务管理器，用来对响应的资源进行有效的控制，相应的资源需要实现XA定义的接口。&lt;/li>
&lt;li>TM（事务管理器、Transaction Manager）：负责协调和管理DTP模型中的事务，为应用程序提供编程接口，同时管理资源管理器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="二阶段提交模型2pc">二阶段提交模型（2PC）
&lt;/h4>&lt;p>2PC模型即两阶段提交协议模型，该模型将事务流程分为Prepare阶段和Commit阶段。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Prepare阶段&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_one.png"
width="1952"
height="886"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_one_hu_3a288a99385f2588.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_one_hu_626339282b73c317.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="528px"
>&lt;/p>
&lt;p>在Prepare阶段，事务管理器给每个参与全局事务的资源管理器发送Prepare消息，资源管理器要么返回失败，要么在本地执行相应的事务，将事务写入本地的Redo Log文件和Undo Log文件，但此时事务并未提交。&lt;/p>
&lt;p>如果在Prepare阶段有资源管理器返回了失败消息则在Commit阶段事务管理器会向其他响应正常消息发送回滚消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commit阶段&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_two.png"
width="1960"
height="938"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_two_hu_23b4684c735e7cc2.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/2PC_step_two_hu_a5a1f7a1a9b0eb90.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="501px"
>&lt;/p>
&lt;p>在2PC的commit阶段，事务管理器向参与全局事务的资源管理器发送commit消息，资源管理器收到消息后提交本地事务并将提交成功的消息返回给事务管理器。&lt;/p>
&lt;h4 id="三阶段提交模型3pc">三阶段提交模型（3PC）
&lt;/h4>&lt;p>相比与2PC模型，3PC模型将prepare阶段分成了CanCommit阶段与PreCommit阶段。&lt;/p>
&lt;ol>
&lt;li>CanCommit阶段&lt;/li>
&lt;/ol>
&lt;p>在CanCommit阶段，事务管理器会向资源管理器发送CanCommit消息，资源管理器如果认为可以执行任务则发送确认消息并进入预备状态。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/can_commit.png"
width="2110"
height="878"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/can_commit_hu_6d123b16b42a5e6e.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/can_commit_hu_f9edcb5f5bbd5b93.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="576px"
>&lt;/p>
&lt;ol start="2">
&lt;li>PreCommit阶段&lt;/li>
&lt;/ol>
&lt;p>在PreCommit阶段，资源管理器接受到消息并写入undo log与redo log。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/prepare_commit.png"
width="2068"
height="880"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/prepare_commit_hu_395697f6622891d2.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/prepare_commit_hu_df04e20e4af037a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="564px"
>&lt;/p>
&lt;ol start="3">
&lt;li>DoCommit阶段&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/do_commit.png"
width="1220"
height="536"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/do_commit_hu_9a6ba7d013a06633.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/do_commit_hu_159389fed0edac17.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;p>在DoCommit阶段，资源管理器收到消息并提交事务。如果超过一定时间资源管理器没有收到事务管理器发送的事务回滚消息则会直接提交事务，如果其资源管理器收到了回滚消息则会导致数据不一致。&lt;/p>
&lt;h3 id="最终一致性的三种解决方案">最终一致性的三种解决方案
&lt;/h3>&lt;p>强一致性方案要求参与事务的各个节点的数据时刻保持一致，在高并发场景下会影响性能。最新一致性方案不要求各个节点的数据始终保持一致，只要数据最终一致即可。&lt;/p>
&lt;h4 id="服务模式">服务模式
&lt;/h4>&lt;h5 id="可查询操作">可查询操作
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/can_search.png"
width="1822"
height="738"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/can_search_hu_84921f3afad800b5.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/can_search_hu_1adc9e2496373c76.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="592px"
>&lt;/p>
&lt;p>可查询操作服务模型要求操作具有唯一标识（唯一业务标识及操作时间）并且要求其他服务在提供操作接口的情况下提供查询接口及批量查询接口，在分布式环境下可以通过查询接口确认操作是否我那次。&lt;/p>
&lt;h5 id="幂等操作">幂等操作
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/mideng.png"
width="1830"
height="752"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/mideng_hu_bbe4fd64a4ff65.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/mideng_hu_798117fffd722c9a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;p>幂等操作要求对于同一个方法相同的参数，操作一次和操作多次的结果相同。在分布式环境下，常常需要重试，而幂等可保证重试对最终结果没有影响。&lt;/p>
&lt;h5 id="tcc操作">TCC操作
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/TCC.png"
width="1842"
height="734"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/TCC_hu_7a0cd62dd82e61a7.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/TCC_hu_81c8334a0b9e2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="602px"
>&lt;/p>
&lt;p>TCC模式包含Try，Commit，Cancel三个阶段。在try阶段完成所有业务的一致性检查、预留必要的业务资源，并需要与其他操作隔离。在Commit执行真正的业务操作。在Cancel释放预留的资源。&lt;/p>
&lt;h5 id="可补偿操作">可补偿操作
&lt;/h5>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/buchang.png"
width="1842"
height="756"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/buchang_hu_db293dafa06e09db.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/buchang_hu_394ef2ed922d5cb3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;p>在分布式环境下数据可能出现不一致，这时需要通过补偿接口进行补偿。
在分布式环境下数据可能出现不一致，这时需要通过补偿接口进行补偿。&lt;/p>
&lt;h4 id="tcc-方案">TCC 方案
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/TCC_solver.png"
width="1176"
height="1226"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/TCC_solver_hu_9c20bd76c6d5744a.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/TCC_solver_hu_eedf5a083174a9af.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="230px"
>&lt;/p>
&lt;ol>
&lt;li>Try阶段&lt;/li>
&lt;/ol>
&lt;p>在 Try 阶段在具体的业务数据进行修改操作并标记状态为待提交，并记录此阶段的反向操作（如增加多少库存）&lt;/p>
&lt;ol start="2">
&lt;li>Confirm阶段&lt;/li>
&lt;/ol>
&lt;p>如果 Try 阶段执行全部成功，则将待提交状态标记为提交状态并取消反向操作。&lt;/p>
&lt;ol start="3">
&lt;li>Cancel阶段&lt;/li>
&lt;/ol>
&lt;p>标记操作的具体业务数据状态为取消，并对业务数据进行反向操作，清除具体的反向操作。&lt;/p>
&lt;h4 id="可靠消息最终一致性解决方案">可靠消息最终一致性解决方案
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message.png"
width="1192"
height="1546"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message_hu_54a177ce922903f8.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message_hu_4e3b6304d745854d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/p>
&lt;p>事务发起方发送可靠消息，事务参与方从可靠消息服务接收消息。由于事务发起方和可靠消息服务、可靠消息服务和事务参与方之间都是通过网络进行通信的，所以需要引入消息确认服务和消息回复服务。&lt;/p>
&lt;p>消息确认服务会定期检测事务发起方业务的执行状态和消息库中的数据，如果发现事务发起方业务的执行状态与消息库中的数据不一致，消息确认服务就会同步事务发起方的业务数据和消息库中的数据，保证数据一致性。&lt;/p>
&lt;p>消息恢复服务会定期检测事务参与方业务执行状态与消息库中数据是否一致，如果发现不一致则回滚消息状态为事务发起方发送消息但未被事务参与方消费的状态。&lt;/p>
&lt;h4 id="最大努力通知型解决方案">最大努力通知型解决方案
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/try_best.png"
width="1216"
height="1552"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/try_best_hu_5c7759c95da3655e.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/try_best_hu_18e92a0e28e72159.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="188px"
>&lt;/p>
&lt;p>业务方在完成业务处理后，会向业务参与方发送消息，发送消息时通知时运行消息丢失。业务方需要体统查询接口供业务接收方按需查询，用于恢复丢失的消息。&lt;/p>
&lt;h2 id="分布式事务原理">分布式事务原理
&lt;/h2>&lt;h3 id="可靠消息分布式事务">可靠消息分布式事务
&lt;/h3>&lt;h4 id="可靠消息的三个角色">可靠消息的三个角色
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/basic_schematic_diagram.png"
width="1906"
height="270"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/basic_schematic_diagram_hu_75820c880402cac.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/basic_schematic_diagram_hu_829199db02b924c1.png 1024w"
loading="lazy"
alt="工作方式"
class="gallery-image"
data-flex-grow="705"
data-flex-basis="1694px"
>&lt;/p>
&lt;p>三个角色与对应职责：&lt;/p>
&lt;ul>
&lt;li>事务参与方：执行事务并发送消息（在诸如RocketMQ等独立消息服务不需要事务参与方保证消息投递与事务提交满足原子性）&lt;/li>
&lt;li>独立消息服务：在出现分区的情况下保证 1. 若事务发起方事务执行状态与可靠消息中间事务消息提交状态一致 2. 独立消息服务消息消费状态与消费者消费状态一致&lt;/li>
&lt;li>消息消费者：事务执行失败能正确通知事务参与方回滚事务&lt;/li>
&lt;/ul>
&lt;p>两条链路：&lt;/p>
&lt;ul>
&lt;li>事务提交链路：事务发起方 -&amp;gt; 独立消息服务 -&amp;gt; 事务参与方&lt;/li>
&lt;li>事务回滚链路：事务参与方 -&amp;gt; 独立消息服务 -&amp;gt; 事务发起方&lt;/li>
&lt;/ul>
&lt;p>在诸如RocketMQ等独立消息服务中只保证事务发起方事务执行与事务参与方消息消费一致但并保证事务参与方事务执行结果与事务参与方消息消费结果一致，即其只提供了事务提交链路的一致，事务回滚链路的一致需要手动保证。&lt;/p>
&lt;h4 id="各个角色实现任务的难点">各个角色实现任务的难点
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>事务参与方如何保证事务提交与消息投递是原子操作&lt;/p>
&lt;ul>
&lt;li>
&lt;p>先发消息&lt;/p>
&lt;ul>
&lt;li>执行事务前发消息：消息发送成功但事务执行失败，只回滚了事务并没有实现消息发送和写库都执行失败或者都执行成功。如果消息接收方通过接口回调来确认消息状态，在读已提交和可重复读的隔离级别下设置回调时间过短可能导致没有正确获取到事务的执行状态。&lt;/li>
&lt;li>执行事务时发送消息：在写库完成前发送消息可能会出现消息发送成功，但写库失败的场景。在网络波动是，发送消息等待响应时间长，会阻塞事务执行，影响系统安全。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>先写库&lt;/p>
&lt;ul>
&lt;li>执行事务后发送消息：在提交事务后设置回调发送消息，单事务已提交，消息可能发送失败。&lt;/li>
&lt;li>事务执行时发送消息：在写库完成后发送消息，发送消息失败则回滚。在网络波动时，发送消息等待响应时间长，会阻塞事务执行，影响系统安全。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>上面的两种方式还可按照 在事务内发消息还是在事务外发消息划分，二者各有如下缺点&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在事务内发消息&lt;/p>
&lt;p>在事务内发消息，在网络超时，生产者重试，可能阻塞事务导致死锁等问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在事务外发消息&lt;/p>
&lt;p>难以保证事务执行成功消息提交成功是原子操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>独立消息服务平台如何保 消息状态正确&lt;/p>
&lt;ul>
&lt;li>如何保证事务发起方事务执行状态与消息状态一致
在网络超时时，事务发起方认为消息发送失败，但消息可能投递成功，导致事务参与方与事务发起方状态不一致。&lt;/li>
&lt;li>如何事务参与方消息消费状态与消息状态一致
在网络波动时，消费者没有在指定时间返回消息处理状态，独立消息服务错误地将消息消费状态标记为失败。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在事务内发送消息会影响数据安全是必须要避免的，现在需要解决的问题是如何在事务外发送消息的情况下保证： 发送消息成功、提交事务、投递消息成功、消费消息成功要么全做要么全不做。&lt;/p>
&lt;h4 id="本地消息表">本地消息表
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>工作过程&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务发起方提交事务&lt;/p>
&lt;p>事务发起方在写业务数据时向本地消息表也写一份数据用于记录需要发送的消息，并且将两个写操作放在一个事务中保证业务数据写操作与本地消息表的记录要么全做要么全不做。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务发起方发送消息&lt;/p>
&lt;p>使用定时任务不断扫描本地消息表，发送消息至消息中间件，如果消息没有发送成功则会不断重试，在重试一定次数仍然失败之后则会把消息放入实信对列，之后进行人工干预。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务参与方接收消息并消费&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/local_message_table.png"
width="2576"
height="1146"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/local_message_table_hu_57d9d018cd88b3be.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/local_message_table_hu_4562c9badd2a555a.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="539px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>各角设如何保证完成自己的任务&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务发起方如何保证提交事务和发送消息是一个原子操作&lt;/p>
&lt;p>本地消息表将写业务数据与写本地消息表放在一个事务里，保证这两个操作能同时执行，此外通过不断重试消息并引入人工处理来保证消息一定能够发送并被消费者消费。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消息中间件如何保证成功返回消息消费状态&lt;/p>
&lt;p>事务参与方提交事务失败时发送一个消息给事务发起方通知其回滚消息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>优点&lt;/p>
&lt;ul>
&lt;li>本地消息表是业界内比较成熟的方案，可靠性高。&lt;/li>
&lt;li>本地消息表实现了数据的最终一致性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>缺点&lt;/p>
&lt;ul>
&lt;li>可靠消息保证与业务代码耦合，需要额外开发定时任务等逻辑。&lt;/li>
&lt;li>可靠消息保证的相关逻辑无法复用，需要重复开发。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>注意点&lt;/p>
&lt;ul>
&lt;li>事务提交后需要保证消息一定投递成功，可能会频繁重试，事务参与方需要保证消息的幂等。&lt;/li>
&lt;li>事务参与方通过消息投递通知事务发起方回滚，事务参与方也需要保证消息可靠投递。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="独立消息服务">独立消息服务
&lt;/h4>&lt;p>独立消息服务的三个角色：&lt;/p>
&lt;ul>
&lt;li>可靠消息服务：负责消息状态维护、消息接收与投递&lt;/li>
&lt;li>消息确认服务：负责保障消息投递方与可靠消息服务中的消息状态一致&lt;/li>
&lt;li>消息恢复服务：用于保障事务参与方消费状态与可靠消息服务中的消息状态一致&lt;/li>
&lt;/ul>
&lt;p>独立消息服务将本地消息表中可靠消息保证的逻辑抽离成独立服务并进行了增强，其工作步骤如下：&lt;/p>
&lt;ul>
&lt;li>事务发起方发送Half消息至可靠消息服务，发送成功后执行本地事务。&lt;/li>
&lt;li>可靠消息服务接收到消息后存储到消息库中并将消息状态标记为“待发送”但不会立即发送消息至消息中间件。&lt;/li>
&lt;li>事务执行成功或失败后事务发起方向可靠消息服务发送确认消息。&lt;/li>
&lt;li>可靠消息服务接收到事务发起方投递消息，若收到确认消息则将消息发送至中间件并将消息状态标记为已发送；若收到取消消息则将消息库中保存的消息标记为已删除。&lt;/li>
&lt;li>消息中间件投递消息至事务参与方，事务参与方接收消息并将处理结果返回给消息中间件。&lt;/li>
&lt;li>消息中间件将消费结果投递至可靠消息服务，可靠消息服务接收到确认消息将消息状态标记为已完成。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message.png"
width="1192"
height="1546"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message_hu_54a177ce922903f8.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/reliable_message_hu_4e3b6304d745854d.png 1024w"
loading="lazy"
alt="可靠消息"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>各个角色如何保证完成自己的任务&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务发起方如何保证提交事务和发送消息是一个原子操作&lt;/p>
&lt;ul>
&lt;li>执行事务前发送消息失败：发送消息失败事务发起方不会提交事务，如果因网络超时事务发起方发送事务成功但没有收到正确响应，可靠消息服务没有接收到确认消息也不会向事务产生方投递消息。&lt;/li>
&lt;li>执行事务成功如何确保发送确认消息成功：执行事务成功，消息发送失败事务发起方与事务参与方状态不一致，消息确认服务会不断校对事务发起方和消息库中消息的状态，发现不一致时会进行校对。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>独立消息服务如何确保证消息状态与事务发起方事务执行状态与事务消费方消费状态一致&lt;/p>
&lt;ul>
&lt;li>消息与事务发起方状态一致：消息确认服务会不断地对事务发起方事务的执行状态和消息库中消息的状态进行校准。&lt;/li>
&lt;li>消息与事务参与方状态一致：可靠消息服务会重试消息投递，重试失败后会由消息恢复服务定时重试。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>一点讨论&lt;/p>
&lt;ul>
&lt;li>独立消息服务一般只保证事务提交链路的一致性，因此可靠消息服务需要确保 若事务发起方提交事务则事务参与方一定能消费消息，可靠消息服务是通过一定次数的重试来实现的。&lt;/li>
&lt;li>独立消息服务包含了一个假设：按照指定规则经过一定次数重试事务参与方一定能消费消息成功。这个假设一般都是成了的，网络波动或者消息者自身问题消费消息失败都是偶然的，通过一定规则重试是能保证消息消费成功的。&lt;/li>
&lt;li>可靠消息能保证最终一致性：在事务参与方提交事务后即时独立消息服务或消息消费服务宕机，重启服务后独立消息服务通过消息确认服务与消息回复服务也能保证消息的最终一致性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="rocketmq事务消息">RocketMQ事务消息
&lt;/h4>&lt;p>RocketMQ工提供了事务消息，工作过程与独立消息服务基本一致，下面我们通过代码来学习RocketMQ事务消息。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/rocketMQ.png"
width="2190"
height="1562"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/rocketMQ_hu_f6b754b330472f2.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/rocketMQ_hu_60fa7ce01c04dd2d.png 1024w"
loading="lazy"
alt="Rocket MQ"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>&lt;/p>
&lt;p>假设我们有一个商场业务下单扣减库存的场景，订单微服务和库存微服务分别部署，订单微服务在生成订单后需要通知库存微服务扣减库存。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/image.png"
width="1580"
height="230"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/image_hu_8d7074cd9174afdd.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/image_hu_30ce26defe17c699.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="686"
data-flex-basis="1648px"
>&lt;/p>
&lt;p>总共涉及到三张表，order表用来存储订单数据，stock表用来存储库存数据，tx_log表用来记录事务。
&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/order.png"
width="2572"
height="646"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/order_hu_fe6f7bb4cd33a53d.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/order_hu_7d31bbb803bb016c.png 1024w"
loading="lazy"
alt="order表"
class="gallery-image"
data-flex-grow="398"
data-flex-basis="955px"
>
&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/stock.png"
width="2584"
height="424"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/stock_hu_b4a883d7d36db2b8.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/stock_hu_590844ca6146851c.png 1024w"
loading="lazy"
alt="stock表"
class="gallery-image"
data-flex-grow="609"
data-flex-basis="1462px"
>
&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/tx_log.png"
width="2576"
height="330"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/tx_log_hu_8c2fc9346cb7bf08.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/tx_log_hu_9e9c5acf462a39aa.png 1024w"
loading="lazy"
alt="tx_log表"
class="gallery-image"
data-flex-grow="780"
data-flex-basis="1873px"
>&lt;/p>
&lt;p>工作过程如下&lt;/p>
&lt;ul>
&lt;li>订单服务需要在执行事务前发送Half消息至RocketMQ并在RocketMQ成功接收到消息后提交事务并发送确认消息到RocketMQ&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">OrderService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">OrderMapper&lt;/span> &lt;span class="n">orderMapper&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RocketMQTemplate&lt;/span> &lt;span class="n">rocketMQTemplate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Transactional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rollbackFor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">submitOrderAndSaveTxNo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TxMessage&lt;/span> &lt;span class="n">txMessage&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Integer&lt;/span> &lt;span class="n">existsTx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">orderMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isExistsTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxNo&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">existsTx&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;订单微服务已经执行过事务,商品id为:{}，事务编号为:{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ProductId&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxNo&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">生成订单&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Order&lt;/span> &lt;span class="n">order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">Order&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setCreateTime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setOrderNo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setPayCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPayCount&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setProductId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getProductId&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">orderMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">saveOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">添加事务日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">orderMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">saveTxLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxNo&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">submitOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Long&lt;/span> &lt;span class="n">productId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">payCount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">生成全局分布式序列号&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">String&lt;/span> &lt;span class="n">txNo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UUID&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randomUUID&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TxMessage&lt;/span> &lt;span class="n">txMessage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">TxMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">productId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payCount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">txNo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JSONObject&lt;/span> &lt;span class="n">jsonObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">JSONObject&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">jsonObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;txMessage&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">txMessage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Message&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="ne">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MessageBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">withPayload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">JSONString&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">发送一条事务消息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rocketMQTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sendMessageInTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tx_order_group&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;topic_txmsg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>RocketMQ在接收到订单服务的半消息后需要通知订单服务，此外在订单服务发送事务提交消息至RocketMQ失败后RocketMQ需要不断校验事务发起方状态.&lt;/li>
&lt;/ul>
&lt;p>RocketMQ提供了RocketMQLocalTransactionListener类，executeLocalTransaction方法会在事务发送方法发送消息成功后被回调，在该方法内执行时服务发送方的提交事务逻辑并提交事务提交消息至RocketMQ。这里需要注意，事务提交的逻辑和发送事务提交消息的逻辑并不再一个方法里。&lt;/p>
&lt;p>ROcketMQ还提供了checkLocalTransaction方法用于检查事务提交方的状态，避免事务消息发送失败导致的事务发起方和参与方状态不一致。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">RocketMQTransactionListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txProducerGroup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;tx_order_group&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">OrderTxMessageListener&lt;/span> &lt;span class="n">implements&lt;/span> &lt;span class="n">RocketMQLocalTransactionListener&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">OrderService&lt;/span> &lt;span class="n">orderService&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">OrderMapper&lt;/span> &lt;span class="n">orderMapper&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Transactional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rollbackFor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span> &lt;span class="n">executeLocalTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Message&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">try&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="s2">&amp;#34;订单微服务执行本地事务&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TxMessage&lt;/span> &lt;span class="n">txMessage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">执行本地事务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">orderService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submitOrderAndSaveTxNo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">提交事务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="s2">&amp;#34;订单微服务提交事务&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">printStackTrace&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">异常回滚事务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="s2">&amp;#34;订单微服务回滚事务&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ROLLBACK&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span> &lt;span class="n">checkLocalTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Message&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="s2">&amp;#34;订单微服务查询本地事务&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TxMessage&lt;/span> &lt;span class="n">txMessage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Integer&lt;/span> &lt;span class="n">exists&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">orderMapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isExistsTx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTxNo&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exists&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">RocketMQLocalTransactionState&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">UNKNOWN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">TxMessage&lt;/span> &lt;span class="n">getTxMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Message&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">String&lt;/span> &lt;span class="n">messageString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="ne">String&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">byte&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPayload&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JSONObject&lt;/span> &lt;span class="n">jsonObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parseObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">messageString&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">String&lt;/span> &lt;span class="n">txStr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jsonObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;txMessage&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">JSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parseObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txStr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TxMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>库存微服务逻辑相对简单，只需消息消息即可&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@Component
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@RocketMQMessageListener(consumerGroup = &amp;#34;tx_stock_group&amp;#34;, topic = &amp;#34;topic_txmsg&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class StockTxMessageConsumer implements RocketMQListener&amp;lt;String&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private StockService stockService;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onMessage(String message) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.info（&amp;#34;库存微服务开始消费事务消息:{}&amp;#34;, message）;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TxMessage txMessage = this.getTxMessage(message);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stockService.decreaseStock(txMessage);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private TxMessage getTxMessage(String msg){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> JSONObject jsonObject = JSONObject.parseObject(msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String txStr = jsonObject.getString(&amp;#34;txMessage&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return JSONObject.parseObject(txStr, TxMessage.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@Service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class StockService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private StockMapper stockMapper;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void decreaseStock(TxMessage txMessage) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.info(&amp;#34;库存微服务执行本地事务,商品id:{}, 购买数量:{}&amp;#34;, txMessage.getProductId(), txMessage.getPayCount());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //检查是否执行过事务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Integer exists = stockMapper.isExistsTx(txMessage.getTxNo());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(exists != null){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.info(&amp;#34;库存微服务已经执行过事务,事务编号为:{}&amp;#34;, txMessage.getTxNo());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Stock stock = stockMapper.getStockByProductId(txMessage.getProductId());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(stock.getTotalCount() &amp;lt; txMessage.getPayCount()){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> throw new RuntimeException（&amp;#34;库存不足&amp;#34;）;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stockMapper.updateTotalCountById(txMessage.getPayCount(), stock.getId());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //记录事务日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stockMapper.saveTxLog(txMessage.getTxNo());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="最大努力通知型分布式事务">最大努力通知型分布式事务
&lt;/h3>&lt;h4 id="适用场景">适用场景
&lt;/h4>&lt;ul>
&lt;li>允许丢失消息&lt;/li>
&lt;li>事务发起方需要提供接口让事务参与回查进行数据校准&lt;/li>
&lt;li>事务参与方的结果不影响事务发起方的结果&lt;/li>
&lt;li>对消息实时性要求不高&lt;/li>
&lt;/ul>
&lt;h4 id="工作过程">工作过程
&lt;/h4>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/distribution-transaction/try_best_yuanli.png"
width="1966"
height="1668"
srcset="https://zhaoyifengf.github.io/p/distribution-transaction/try_best_yuanli_hu_bfe5af09a2f79374.png 480w, https://zhaoyifengf.github.io/p/distribution-transaction/try_best_yuanli_hu_a18f08b75f59f8ad.png 1024w"
loading="lazy"
alt="最大努力通知型分布式事务"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="282px"
>&lt;/p>
&lt;ol>
&lt;li>事务参与方执行事务后发送消息&lt;/li>
&lt;li>消息中间件接收消息后将消息标记为待发送&lt;/li>
&lt;li>消息中间件向事务参与方投递消息&lt;/li>
&lt;/ol>
&lt;h4 id="业务场景">业务场景
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>业务场景&lt;/th>
&lt;th>场景描述&lt;/th>
&lt;th>特点与适用条件&lt;/th>
&lt;th>示例说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>支付成功通知商户&lt;/td>
&lt;td>用户支付成功后，支付平台需通知商户系统发货或履约&lt;/td>
&lt;td>支付成功事件已在支付系统本地提交，通知为异步重试多次，允许因网络或系统原因有延迟，但要求最终送达或人工处理&lt;/td>
&lt;td>微信支付/支付宝在支付回调失败时，会间隔多次重试通知商户接口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>订单状态变更通知&lt;/td>
&lt;td>电商平台订单状态变化（已发货/已收货）需要通知物流、会员积分等系统&lt;/td>
&lt;td>状态变化事件已写入订单库，不阻塞交易主流程，通过消息或HTTP回调多次发送&lt;/td>
&lt;td>物流同步接口失败会隔一段时间重试，多数场景允许几分钟内延迟同步&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>异步库存同步&lt;/td>
&lt;td>核心交易系统与库存系统解耦，交易成功后通知库存系统扣减&lt;/td>
&lt;td>交易已完成且不可逆，通知可延迟执行，通过补偿或定时任务保证一致性&lt;/td>
&lt;td>生鲜电商交易完成后，库存系统可能因网络抖动导致同步延迟&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>用户行为上报&lt;/td>
&lt;td>APP端关键行为（观看、点击、分享）发送到埋点分析系统&lt;/td>
&lt;td>埋点数据允许丢失少量信息，但希望尽量多送达，提高数据准确度&lt;/td>
&lt;td>行为日志先入本地队列，后台重试发送到数据平台&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>发票开具通知&lt;/td>
&lt;td>用户付款后通知财税系统开具电子发票&lt;/td>
&lt;td>可以异步通知，避免交易阻塞，财税接口短时不可用时可多次重试&lt;/td>
&lt;td>第三方发票平台偶尔超时，异步通知能显著提升整体体验&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>ES Introduction</title><link>https://zhaoyifengf.github.io/p/es-introduction/</link><pubDate>Mon, 10 Feb 2025 22:34:00 +0800</pubDate><guid>https://zhaoyifengf.github.io/p/es-introduction/</guid><description>&lt;img src="https://zhaoyifengf.github.io/p/es-introduction/cover.png" alt="Featured image of post ES Introduction" />&lt;h2 id="利用倒排索引加速查询符合条件的文本">利用倒排索引加速查询符合条件的文本
&lt;/h2>&lt;h3 id="利用倒排索引加速查询">利用倒排索引加速查询
&lt;/h3>&lt;p>对于若干段文本，例如：1: &amp;ldquo;I hava an orange&amp;rdquo;，2: &amp;ldquo;I hava a banana&amp;rdquo;，3: &amp;ldquo;I hava an apple&amp;rdquo;，想要查询&amp;quot;apple&amp;quot;在哪条记录里需要遍历所有文体，时间复杂度为O(n)。将文本进行切分，以切分后的文本作为键，文本ID作为值构成一个二维表格，这样可以大大降低查询时间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>term&lt;/th>
&lt;th>文本id&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>I&lt;/td>
&lt;td>1、2、3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>have&lt;/td>
&lt;td>1、2、3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>an&lt;/td>
&lt;td>1、3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>orange&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>banana&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>apple&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>但当词项增多，遍历这些词项仍需花费大量时间，对词项进行倒排并进行二分查找可将时间复杂度降低到O(logN)。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Term dictionary&lt;/th>
&lt;th>Posting list&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>a&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>an&lt;/td>
&lt;td>1、3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>apple&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>banana&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>have&lt;/td>
&lt;td>1、2、3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>I&lt;/td>
&lt;td>1、2、3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>orange&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>将排好的词项称为Term dictionary，文档ID称为Posting list，构成的搜索结构称为inverted index（倒排索引）。&lt;/p>
&lt;h3 id="利用term-index进一步加速查询">利用Term index进一步加速查询
&lt;/h3>&lt;p>将文本进行分词后得到的Term dictionary数据量巨大，只能通过磁盘检索。检索磁盘耗时较长，基于Term dictionary构建一颗字典树（Term index）并将字段树放入内存将极大加速索引效率。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/es-introduction/term_index.png"
width="431"
height="221"
srcset="https://zhaoyifengf.github.io/p/es-introduction/term_index_hu_cea63327e0a397ff.png 480w, https://zhaoyifengf.github.io/p/es-introduction/term_index_hu_2ee0346ee6cc0466.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/p>
&lt;h3 id="利用store-fileds存储文档">利用Store Fileds存储文档
&lt;/h3>&lt;p>ES采用行式存储数据，对应存储结构被称为Store Fileds。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/es-introduction/store_fileds.png"
width="221"
height="171"
srcset="https://zhaoyifengf.github.io/p/es-introduction/store_fileds_hu_c1e7696731cd019d.png 480w, https://zhaoyifengf.github.io/p/es-introduction/store_fileds_hu_b999fa13a904b486.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;h3 id="利用doc-values实现快速聚合操作排序脚本计算">利用Doc Values实现快速聚合操作、排序、脚本计算
&lt;/h3>&lt;p>行式存储数据在进行大规模数据的聚合、排序以及脚本计算操作时效率低下，因此ES提供了列式存储结构Doc Values，针对单个字段进行集中存储，每行记录了字段值及其所在文档的文档ID。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/es-introduction/doc_values.png"
width="421"
height="121"
srcset="https://zhaoyifengf.github.io/p/es-introduction/doc_values_hu_c43deeacae58f1f7.png 480w, https://zhaoyifengf.github.io/p/es-introduction/doc_values_hu_8669eb0233fd1bd7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="347"
data-flex-basis="835px"
>&lt;/p>
&lt;h3 id="segment">segment
&lt;/h3>&lt;p>segment是一个具备搜索功能的最小单元，包含了Inverted Index，Term Index，Stored Fileds，Doc Values四个模块。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/es-introduction/segment.png"
width="161"
height="251"
srcset="https://zhaoyifengf.github.io/p/es-introduction/segment_hu_bb81839976b255e6.png 480w, https://zhaoyifengf.github.io/p/es-introduction/segment_hu_166c6036305dda2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="153px"
>&lt;/p>
&lt;h3 id="lucene">Lucene
&lt;/h3>&lt;p>新增数据时不会立刻写入segment而是先写入内存缓冲区，等到执行refresh动作时将数据写入新的segment，在segment激活后才能参与搜索，已经写入的segment不可再进行写入。频繁的生成新的segment会导致数量过多，通过不定期将多个小segment合并为一个大segment可以减小segment数量。上面提到的就是大名鼎鼎的搜索引擎lucene的工作过程。&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/es-introduction/lucene.png"
width="131"
height="161"
srcset="https://zhaoyifengf.github.io/p/es-introduction/lucene_hu_f426cccd309b8875.png 480w, https://zhaoyifengf.github.io/p/es-introduction/lucene_hu_35e8229c42c504ea.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="195px"
>&lt;/p>
&lt;h2 id="es实现高性能高并发高扩展性">ES实现高性能、高并发、高扩展性
&lt;/h2>&lt;h3 id="高性能">高性能
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>单个lucene读写性能过低，将数据按照业务划分，不同的数据写入不同的lucene可以提到读写并发度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单个index name的数量扔热可能过多，对单个index name的数据进行分片，每个分片对应着一个lucene库，可进一步提高并发度。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="高扩展性">高扩展性
&lt;/h3>&lt;p>申请多个node，将不同的分片部署到不同的node上&lt;/p>
&lt;h3 id="高可用">高可用
&lt;/h3>&lt;p>对每个分片部署多个副本，不同的副本部署到不同的节点上。&lt;/p>
&lt;h3 id="node请求分化">node请求分化
&lt;/h3>&lt;p>若同一个node同时负责集群管理、存储数据、处理请求，在进行扩展时将同时扩展这几个能力，在实际使用时可能只需要扩展其中一两个能力，通过将功能进行分化，不同的node部署不同的功能，可实现能力的按需扩展。&lt;/p>
&lt;h3 id="去中心化">去中心化
&lt;/h3>&lt;p>由于同时保护了多个node，需要对多个node进行管理选取其中主节点，使用zookeeper会导致系统过重，使用raft可实现去中心化选主。&lt;/p>
&lt;h3 id="es-整体架构">ES 整体架构
&lt;/h3>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/es-introduction/es.png"
width="608"
height="251"
srcset="https://zhaoyifengf.github.io/p/es-introduction/es_hu_e33e72a24d06855.png 480w, https://zhaoyifengf.github.io/p/es-introduction/es_hu_d0b00cf565125ed2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p></description></item><item><title>Kafka Introduction</title><link>https://zhaoyifengf.github.io/p/kafka-introduction/</link><pubDate>Mon, 27 Jan 2025 00:28:09 +0800</pubDate><guid>https://zhaoyifengf.github.io/p/kafka-introduction/</guid><description>&lt;img src="https://zhaoyifengf.github.io/p/kafka-introduction/cover.png" alt="Featured image of post Kafka Introduction" />&lt;h2 id="一步步看kfka">一步步看Kfka
&lt;/h2>&lt;h3 id="直接调用接口的弊端">直接调用接口的弊端
&lt;/h3>&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/kafka-introduction/direct-send-msg.svg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>系统耦合度提升&lt;/li>
&lt;li>当生产者的生产速度大于消费者的消费速度时会导致消费者来不及处理导致消息丢失&lt;/li>
&lt;/ul>
&lt;h3 id="消费者添加消息队列实现消息缓冲">消费者添加消息队列实现消息缓冲
&lt;/h3> &lt;img src="add-queue-to-consumer.svg" width="60%" height="60%">
&lt;p>很容想到在消费者中提供一个消息队列缓冲没有能够及时处理的消息，通过offset记录已经处理的消息。但这样做仍然会存在以下问题：&lt;/p>
&lt;ul>
&lt;li>在消费者重启后消息会丢失&lt;/li>
&lt;li>每个消费者都维护一个消息队列存在着重复造轮子的问题&lt;/li>
&lt;li>生产者和消费者耦合的问题并没有解决&lt;/li>
&lt;/ul>
&lt;h3 id="将消息队列独立成一个服务">将消息队列独立成一个服务
&lt;/h3> &lt;img src="simple-msg-queue.svg" width="60%" height="60%">
&lt;p>将消息队列抽成一个单独的服务使其可以服务于各个业务避免了重复造轮子的问题，实现了生产者和消费者之间的解耦，并且消息持久化、防止消息丢失的逻辑都可在一个服务中实现，独立于业务逻辑。在消息队列服务中我们需要实现高性能、高扩展。&lt;/p>
&lt;h3 id="实现消息队列的高性能展性">实现消息队列的高性能展性
&lt;/h3>&lt;h4 id="根据topic定义多消息队列">根据topic定义多消息队列
&lt;/h4> &lt;img src="multi-producer-consumer.svg" width="60%" heigh="60%">
&lt;p>通过增加生产者和消费者可以增加生产消息和消费消息的速度。单个消息队列将导致生产者和消费者竞争同一个队列，消息队列将成功性能的瓶颈。但不同业务下的消息并没有关联，也自然没有必要将所有的消息都通过一个消息队列处理。将同一个业务定义下的消息归纳到一个消息队列下（topic队列），这样就将消息队列中的一个消息队列拆分为多个topic队列，大大提升了消息的处理速度。&lt;/p>
&lt;img src="topic-queue.svg" width="60%" height="60%">
&lt;p>当一个topic消息量大时，当前的设计仍然无法满足高性能需求。&lt;/p>
&lt;h4 id="使用partition进一步提高并发度">使用partition进一步提高并发度
&lt;/h4> &lt;img src="simple-partition.svg" width="60%" height="60%">
&lt;p>对同一个topic再进行切分，每个partition对应着一个队列，不同消费者处理不同的消息队列。&lt;/p>
&lt;h4 id="consumer-group-实现多消费者的业务隔离">consumer-group: 实现多消费者的业务隔离
&lt;/h4> &lt;img src="consumer-group.svg" width="60%" height="60%">
&lt;p>在上面提到的优化策略中，多个消费者协作处理一个topic，也就是一个消息只能被一个消费者消费。在实际业务需求中，同一个消息需要被多个业务线处理，这样就引入了消费者组的概念，同一个消费者组中的消费者协作处理同一个消息（一个消息只能被消费者组中的一个消费者处理），不同消费者组互不影响。&lt;/p>
&lt;h3 id="实现消息队列的高扩展性">实现消息队列的高扩展性
&lt;/h3>&lt;p>在上面的步骤中，通过对消息队列切分再切分已经大大提高了消息队列的性能，但整个消息队列的性能仍受机器的限制，需要通过扩展机器提高整个消费队列服务的性能。&lt;/p>
&lt;img src="simple-broker.svg" width="60%" height="60%">
&lt;p>通过将同一个topic中的不同partition分布在不同的broker上，再将多个broker构成一个kafka集群，实现硬件能力的扩展，提高kafka的处理速度。&lt;/p>
&lt;h3 id="实现消息队列的高可用">实现消息队列的高可用
&lt;/h3>&lt;h4 id="解决单个broker宕机一主多从">解决单个broker宕机：一主多从
&lt;/h4> &lt;img src="one-leader-multi-follower.svg" width="60%" height="60%">
&lt;p>对每个partition，创建一个主节点，多个从节点，主节点负责读写，从节点只负责从主节点拉取数据、作数据备份。当某个broker宕机后，重新选取partition作为主节点。&lt;/p>
&lt;h4 id="解决所有broker宕机数据持久化与过期策略">解决所有broker宕机：数据持久化与过期策略
&lt;/h4> &lt;img src="persistence.svg" width="60%" height="60%">
&lt;p>如果数据都存储在内存中，当所有broker都宕机后未消费的消息将丢失，通过持久化并重启服务可实现服务宕机后的数据恢复。数据不断写入磁盘将会导致磁盘空间占满，需要一种过期策略剔除过期数据。&lt;/p>
&lt;h2 id="kafka基本操作">Kafka基本操作
&lt;/h2></description></item><item><title>Git Introduction</title><link>https://zhaoyifengf.github.io/p/git-introduction/</link><pubDate>Fri, 03 Jan 2025 22:04:00 +0000</pubDate><guid>https://zhaoyifengf.github.io/p/git-introduction/</guid><description>&lt;img src="https://zhaoyifengf.github.io/p/git-introduction/cover.png" alt="Featured image of post Git Introduction" />&lt;h2 id="git版本控制的方式">git版本控制的方式
&lt;/h2>&lt;h3 id="两种版本控制方式">两种版本控制方式
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>基于差异的版本控制（delta-based）
这类版本控制将存储信息看作一组基本文件和每个文件随时间逐步积累的差异&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0104-tn.png"
loading="lazy"
alt="图片描述"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于快照的版本控制
这类版本控制将存储信息看作对小型文件系统的一系列快照，在git中，每当提交更新或者保存项目状态时，就会基本上对当时的全部文件创建一个快照保存并保存这个快照的索引。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0105-tn.png"
loading="lazy"
alt="图片描述"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="git环境配置">git环境配置
&lt;/h2>&lt;h3 id="基本命令">基本命令
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>设置全局配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git config --global
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>config：表示配置git&lt;/li>
&lt;li>&amp;ndash;global：表示全局配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>设置用户名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git config --global user.name &amp;#34;用户名&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置邮箱&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git config --global user.email &amp;#34;邮箱&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用户名和邮箱是这台机器上git的唯一标志&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="获取git仓库">获取git仓库
&lt;/h2>&lt;h3 id="本地仓库的创建和初始化">本地仓库的创建和初始化
&lt;/h3>&lt;h4 id="在已存在目录中创建和初始化">在已存在目录中创建和初始化
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>进入目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd 目录名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>初始化当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行git init目录后出现如下结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示：使用 &amp;#39;master&amp;#39; 作为初始分支的名称。这个默认分支名称可能会更改。要在新仓库中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示：配置使用初始分支名，并消除这条警告，请执行：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示： git config --global init.defaultBranch &amp;lt;名称&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示：除了 &amp;#39;master&amp;#39; 之外，通常选定的名字有 &amp;#39;main&amp;#39;、&amp;#39;trunk&amp;#39; 和 &amp;#39;development&amp;#39;。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示：可以通过以下命令重命名刚创建的分支：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">提示： git branch -m &amp;lt;name&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已初始化空的 Git 仓库于 /Users/zhaoyifeng/Documents/LocalRepository/test/.git/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看仓库中的文件夹：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % ls -ah
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">. .. .git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>.git文件夹默认处于隐藏状态，需要添加-ah参数才能查看所有文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看.git文件夹中的内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % cd .git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 .git % ls -ah
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">. .. HEAD config description hooks info objects refs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件夹&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>hooks&lt;/td>
&lt;td>包含客户端或服务端的勾子脚本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>info&lt;/td>
&lt;td>保护一个全局性排除文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>logs&lt;/td>
&lt;td>保存日志信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>objects&lt;/td>
&lt;td>存储所有数据内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>refs&lt;/td>
&lt;td>存储指向数据的提交对象的指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>config&lt;/td>
&lt;td>包含项目特有的配置选项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>description&lt;/td>
&lt;td>用来显示对仓库的描述&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HEAD&lt;/td>
&lt;td>指示目前被检出的分支&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>index&lt;/td>
&lt;td>保存暂存区信息&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="5">
&lt;li>git中的工作区、暂存区、版本库和仓库中文件夹的对应关系&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>git中的区域&lt;/th>
&lt;th>文件夹&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>工作区&lt;/td>
&lt;td>项目目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>版本库&lt;/td>
&lt;td>.git文件夹，用来存放代码及历史版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>暂存区&lt;/td>
&lt;td>.git下的index文件，用来存储临时文件（只是在index文件中添加一条操作记录，并没有将内容存放到index文件中）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="克隆现有的仓库">克隆现有的仓库
&lt;/h4>&lt;ol>
&lt;li>git克隆命令：&lt;code>git clone &amp;lt;url&amp;gt; name&lt;/code>
会将远程仓库中的项目克隆到当前目录，然后初始化该项目，并进行add和commit&lt;/li>
&lt;/ol>
&lt;h2 id="git中的文件状态">git中的文件状态
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>未跟踪&lt;/p>
&lt;p>默认情况下，git仓库（执行&lt;code>git init&lt;/code>命令的文件夹）下的文件处于未跟踪的状态，git无法对区进行跟踪管理。通过&lt;code>add&lt;/code>命令可以将其由未跟踪变为已跟踪状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>已跟踪
添加到git仓库管理中的文件处于已跟踪的状态，git可以对其进行跟踪管理。已跟踪状态可以细分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>已暂存（Staged）：通过add命令将文件添加到暂存区后文件将处于Staged状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>已修改（Modified）：修改了已跟踪的文件后，将处于Modified状态&lt;/p>
&lt;/li>
&lt;li>
&lt;p>未暂存（Committed）：将暂存区中的文件使用commit命令提交到git仓库后将处于Modified状态。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0106-tn.png"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="本地仓库的操作命令">本地仓库的操作命令
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>创建本地仓库&lt;/p>
&lt;ul>
&lt;li>创建一个空文件夹&lt;/li>
&lt;li>进入该文件夹执行&lt;code>git init&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>添加文件到本地仓库&lt;/p>
&lt;ol>
&lt;li>在创建的文件夹中新建一个文件&lt;/li>
&lt;li>使用&lt;code>git add xxx.xx&lt;/code>命令将工作区中的文件添加到暂存区，文件状态由未跟踪变为已跟踪。
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % vim test.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % git add test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>版本库只能跟踪和管理文本文件，视频、图片等文件虽然可由git管理，但git只能记录其大小而无法记录具体修改的内容。
&lt;code>git add .&lt;/code>将所有文件添加到暂存区。&lt;/li>
&lt;li>取消暂存：&lt;code>git reset HEAD 文件名&lt;/code>：取消暂存某一文件&lt;/li>
&lt;li>使&lt;code>git commit -m &amp;quot;xxxx&amp;quot;&lt;/code>将暂存区中的内容提交到本地仓库，&lt;code>-m&lt;/code>后面的参数是本次提交的描述
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % git commit -m &amp;#34;第一次提交&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[master（根提交） f9de3df] 第一次提交
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1 file changed, 1 insertion(+)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create mode 100644 test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>使用&lt;code>git commit -m -a&lt;/code>进行先暂存再提交&lt;/li>
&lt;li>在工作目录中回退到最近一次提交的版本：&lt;code>git checkout -- &amp;lt;file&amp;gt;&lt;/code>&lt;/li>
&lt;li>修改commit的注释
&lt;ul>
&lt;li>
&lt;p>执行如下命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git commit --amend
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>进入编辑器，修改注释信息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改后输入 control + o 然后输入输入回车进行写入&lt;/p>
&lt;/li>
&lt;li>
&lt;p>退出编译器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>忽略文件
新建.gitignore文件，在里面添加需要忽略的文件&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="查看历史提交记录和当前状态">查看历史提交记录和当前状态
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>执行&lt;code>git status&lt;/code>命令查看状态，使用&lt;code>git status -s&lt;/code>或&lt;code>git status --short&lt;/code>查看简短的状态。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % git status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">位于分支 master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">无文件要提交，干净的工作区
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test %
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行&lt;code>git log&lt;/code>查看历史记录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % git log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit bbf9be55393f4aaeb85909b9b4071973d21a2d50 (HEAD -&amp;gt; master)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author: zhaoyifeng &amp;lt;zhaoyifeng@lixiang.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Wed Jul 5 17:14:36 2023 +0800
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The first time submit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>commit后面的字符串是这次提交的ID，（HEAD -&amp;gt; master)表示当前提交到了主分支，HEAD是一个指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Author后面提交用户的信息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Date是提交时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后一行是提交的描述信息&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>查看差异&lt;/p>
&lt;ul>
&lt;li>&lt;code>git diff&lt;/code>：查看尚未暂存的文件进行了那些修改&lt;/li>
&lt;li>&lt;code>git diff -- staged&lt;/code>：对比已暂存文件和最后一次提交文件的差异&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="git中的分支">git中的分支
&lt;/h2>&lt;h3 id="分支的本质">分支的本质
&lt;/h3>&lt;p>分支的本质：指向commit对象的可变指针（也可理解为执行数据快照的指针）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>commit对象：每次提交时都会保存一个commit对象，，包含指向暂存内容快照的指针、本次提交的作者等相关附属信息、零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0302-tn.png"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git分支：指向commit对象的指针。git会默认创建一个master分支，在每次提交时都会自动向前移动。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0303-tn.png"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建分支：本质上就是创建一个指针，&lt;code>git branch testing&lt;/code>新建一个分支指针指向当前commit对象。也就是HEAD指针指向的分支指向的commit对象。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0304-tn.png"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HEAD指针：指向当前所在的分支（HEAD不可直接指向commit对象）&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0305-tn.png"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>切换分支：改变HEAD指向的分支。&lt;code>git checkout testing&lt;/code>切换到testing分支。&lt;/p>
&lt;blockquote>
&lt;p>当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0306-tn.png"
loading="lazy"
>
每提交一次后，HEAD都会随着当前分支一起移动。（HEAD指向的是分支指针，提交时分支指针不变，改变的只是分支指针指向的对象。）执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">vim test rb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -a -m &amp;#39;made a change&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>得到如下结果：
&lt;img src="https://gitee.com/progit/figures/18333fig0307-tn.png"
loading="lazy"
>
切换到一个分支时会将工作目录中的内容加载为该分支指向的快照中的内容，这会导致原来的工作目录中的内容丢失。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分支分叉：如果切换到master分支并在修改后进行提交那就会产生分支的分叉。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim test rb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -a -m &amp;#39;made other change&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0309-tn.png"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分支的合并：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>未分叉分支的合并&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0313-tn.png"
loading="lazy"
>
执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ git checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git merge hotfix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Updating f42c576..3a0874c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Fast forward
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">README | 1 -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1 files changed, 0 insertions(+), 1 deletions(-)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现出现了Fast forward也就是快进，这是因为要合并的分支在master的上游，只需要把master指向hotfix指向的commit对象即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分叉分支的合并
&lt;img src="https://gitee.com/progit/figures/18333fig0315-tn.png"
loading="lazy"
>
合并如图所示的分支，将iss53合并回master，执行如下命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge iss53
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于master指向的commit节点（C4）不是iss53指向的commit节点（C5）的直接祖先，因此会进行C4、C5和二者最近的共同祖先（C2）三个节点的简单三方合并的到一个新的简单快照，然后创建一个行的commit对象（C6）指向这个简单快照，然后master指向C6。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0316-tn.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/progit/figures/18333fig0317-tn.png"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三种不同的合并方式&lt;/p>
&lt;p>&lt;img src="https://zhaoyifengf.github.io/p/git-introduction/three_merge_explain.png"
width="1438"
height="624"
srcset="https://zhaoyifengf.github.io/p/git-introduction/three_merge_explain_hu_f8255808a26af856.png 480w, https://zhaoyifengf.github.io/p/git-introduction/three_merge_explain_hu_c92abe800529efd.png 1024w"
loading="lazy"
alt="三种不同的合并方式"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="553px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>git merge &amp;ndash;ff(fast-forward): 如果能快进则快进分支即移动指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git merge &amp;ndash;no-ff(no-fast-forword): 即使能快进也会创建一个新的commit(内容和被合并分支的commit相同)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git merge &amp;ndash;squash: 将被合并节点的修改的内容（保存删除操作）加载到工作区和暂存区，等待一次新的提交&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>合并时发生冲突：如果不同分支修改了同一部分，那合并时可能发生冲突。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git merge iss53
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Auto-merging index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CONFLICT (content): Merge conflict in index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Automatic merge failed; fix conflicts and then commit the result.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>git作了合并但未提交，它会停下来等待解决冲突。打开发生冲突的文件index.html：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD:index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;div id=&amp;#34;footer&amp;#34;&amp;gt;contact : email.support@github.com&amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=======
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;div id=&amp;#34;footer&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">please contact us at support@github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; iss53:index.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>=======上面是当前分支文件中的内容，下面是iss53分支的内容。手动解决冲突，然后执行&lt;code>git add index.html&lt;/code>，一旦进入暂存区就代表冲突已解决。再执行&lt;code>git commit&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除分支：&lt;code>git branch -d 分支名&lt;/code>，删除指定的分支。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分支的管理
查看当前有哪些分支，其中*表示当前分支即HEAD指向的分支&lt;code>git branch&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % git branch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">testing
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看分支最后一次提交的信息&lt;code>git branch -v&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 test % git branch -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* master e13db42 Merge branch &amp;#39;testing&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">testing ad69ccd testing第四次提交
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看已合并到当前分支的分支：&lt;code>git branch --merged&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看未合并到当前分支的分支：&lt;code>git branch --no-merged&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>远程分支&lt;/p>
&lt;ul>
&lt;li>
&lt;p>远程仓库的添加与查看&lt;/p>
&lt;p>添加远程仓库，url是远程仓库的地址，shorname是给url对应的远程仓库的命名。执行&lt;code>git clone url&lt;/code>后会自动添加一个远程仓库并将其命名为origin，并且克隆这个远程仓库到本地。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git remote add &amp;lt;shortname&amp;gt; &amp;lt;url&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看远程仓库&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 mytest % git remote
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">origin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看远程仓库和对应的URL，fetch表示拉取的链接，push表示推送的链接。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 mytest % git remote -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">origin https://gitee.com/zhao-jufeng/mytest/ (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">origin https://gitee.com/zhao-jufeng/mytest/ (push)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看某个远程仓库的具体信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 mytest % git remote show origin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* 远程 origin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">获取地址：https://gitee.com/zhao-jufeng/mytest/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">推送地址：https://gitee.com/zhao-jufeng/mytest/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HEAD 分支：master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">远程分支：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dev 已跟踪
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">master 已跟踪
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为 &amp;#39;git pull&amp;#39; 配置的本地分支：ƒ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">master 与远程 master 合并
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为 &amp;#39;git push&amp;#39; 配置的本地引用：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">master 推送至 master (最新)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>远程分支的查看：远程分支是存储在本地对应着远程数据库中分支的分支。&lt;/p>
&lt;p>&lt;code>git branch&lt;/code>：只能查看本地分支&lt;/p>
&lt;p>&lt;code>git branch -r&lt;/code>：查看远程分支&lt;/p>
&lt;p>远程仓库含有master和dev分支，执行&lt;code>git clone https://gitee.com/zhao-jufeng/mytest/&lt;/code>命令后执行&lt;code>git branch -r&lt;/code>可以得到：
&lt;code>zhaoyifeng@MacBook-Air-6 mytest % git branch -r origin/HEAD -&amp;gt; origin/master origin/dev origin/master&lt;/code>
可以看到有两个远程分支，origin是远程仓库的名字，执行clone命令时默命名为origin。需要注意的是，这些分支也存储在本地，与远程仓库作一一映射。&lt;/p>
&lt;p>执行&lt;code>tree .git&lt;/code>查看.git的目录结构：&lt;/p>
&lt;pre>&lt;code> ```
zhaoyifeng@MacBook-Air-6 mytest % tree .git
.git
├── HEAD
├── config
├── description
├── hooks
│   ├── applypatch-msg.sample
│   ├── commit-msg.sample
│   ├── fsmonitor-watchman.sample
│   ├── post-update.sample
│   ├── pre-applypatch.sample
│   ├── pre-commit.sample
│   ├── pre-merge-commit.sample
│   ├── pre-push.sample
│   ├── pre-rebase.sample
│   ├── pre-receive.sample
│   ├── prepare-commit-msg.sample
│   ├── push-to-checkout.sample
│   ├── sendemail-validate.sample
│   └── update.sample
├── index
├── info
│   └── exclude
├── logs
│   ├── HEAD
│   └── refs
│   ├── heads
│   │   └── master
│   └── remotes
│   └── origin
│   └── HEAD
├── objects
│   ├── info
│   └── pack
│   ├── pack-d93bb5ea2faba296524bc440149ae8b102f490cf.idx
│   ├── pack-d93bb5ea2faba296524bc440149ae8b102f490cf.pack
│   └── pack-d93bb5ea2faba296524bc440149ae8b102f490cf.rev
├── packed-refs
└── refs
├── heads
│   └── master
├── remotes
│   └── origin
│   └── HEAD
└── tags
```
&lt;/code>&lt;/pre>
&lt;p>远程的refs中的内容被压缩到了packed-refs中，查看其内容可以看到两个远程分支。
&lt;code>cat .git/packed-refs # pack-refs with: peeled fully-peeled sorted 7eb1322ce1fa2104ac76d996c08eb1a861860cc1 refs/remotes/origin/dev 7eb1322ce1fa2104ac76d996c08eb1a861860cc1 refs/remotes/origin/master&lt;/code>
如果refs中含有远程分支，则该分支是最新的，packed-refs对远程分支的压缩有延迟。
执行&lt;code>git log&lt;/code>可以查看历史，master, origin/master, origin/dev, origin/HEAD都指向了一个commit对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 mytest % git log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit 7eb1322ce1fa2104ac76d996c08eb1a861860cc1 (HEAD -&amp;gt; master, origin/master, origin/dev, origin/HEAD)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author: 赵已峰 &amp;lt;zhaoyifeng@lixiang.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Fri Jul 7 01:25:14 2023 +0000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add test.txt.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Signed-off-by: 赵已峰 &amp;lt;zhaoyifeng@lixiang.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit d6ce159ed51c87cd4e7531dfbbeb6015e5c22f1f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author: 赵已峰 &amp;lt;zhaoyifeng@lixiang.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Fri Jul 7 01:24:38 2023 +0000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Initial commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>同步远程仓库中的分支到本地：在远程分支（本地存储的远程仓库的分支并不是远程仓库中的分支）上修改后提交或者执行merge命令不会移动远程分支，只有通过&lt;code>git fetch&lt;/code>或者&lt;code>git pull&lt;/code>才会改变远程分支。这是为了保持远程分支和远程仓库中的分支的对应关系，避免在本地对远程分支进行修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git fetch [remote-name]&lt;/code>：从远程仓库中拉取本地仓库没有的数据，这个操作会移动远程分支。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 mytest % git fetch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: Enumerating objects: 4, done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: Counting objects: 100% (4/4), done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: Compressing objects: 100% (2/2), done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">展开对象中: 100% (3/3), 967 字节 | 193.00 KiB/s, 完成.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">来自 https://gitee.com/zhao-jufeng/mytest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7eb1322..f20bd41 master -&amp;gt; origin/master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>git pull &lt;/code>：&lt;code>git fetch&lt;/code>和&lt;code>git merge&lt;/code>命名的组合&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git pull 远程仓库名 远程仓库分支名:本地分支名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>拉取远程仓库中的分支在与本地分支merge（需要注意的是这会拉取远程仓库中的所有分支）
如何入当前分支合并则可以省略本地分支名，简写为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git pull 远程仓库名 远程仓库分支名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>删除远程分支：&lt;/p>
&lt;p>删除远程仓库中的分支再查看会出现如下提示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 mytest % git remote show origin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* 远程 origin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">获取地址：https://gitee.com/zhao-jufeng/mytest/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">推送地址：https://gitee.com/zhao-jufeng/mytest/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HEAD 分支：master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">远程分支：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">master 已跟踪
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">refs/remotes/origin/dev 已过期（使用 &amp;#39;git remote prune&amp;#39; 来移除）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为 &amp;#39;git pull&amp;#39; 配置的本地分支：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">master 与远程 master 合并
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为 &amp;#39;git push&amp;#39; 配置的本地引用：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">master 推送至 master (本地已过时)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>提示远程分支已过期，建议删除。执行如下命名删除：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">zhaoyifeng@MacBook-Air-6 mytest % git remote prune origin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">修剪 origin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">URL：https://gitee.com/zhao-jufeng/mytest/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* [已删除] origin/dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者&lt;code>git fetch --prune&lt;/code>先删远程仓库中没有的本地远程分支，然后再拉取远程仓库中的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本地仓库同步到远程仓库&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>git push 远程仓库名 本地分支名:远程仓库中的分支名&lt;/code>：用本地仓库中的分支更新远程仓库的分支，这会让远程仓库的分支直接指向本地仓库的分支指向的commit，此外，与远程仓库中对应的远程分支也会指向本地分支指向的commit。注意，这并不要本地仓库中有远程仓库中对应的远程分支。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果本地分支名与远程仓库中的分支名相同，则可以简写为&lt;code>git push 远程仓库名 分支名&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>跟踪分支：执行git push命令时需要同指定远程仓库名、本地分支名和远程分支名，而跟踪分支则可简化这个操作。&lt;/p>
&lt;p>跟踪分支：本地分支和某个远程分支建立联系后那这个本地分支就变成一个跟踪分支。在跟踪分支上执行&lt;code>git push&lt;/code>和&lt;code>git pull&lt;/code>命令时无需指定远程仓库名、本地分支名和远程分支名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跟踪分支的创建&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在远程分支上创建分支时指定其为远程分支（建的本地分支名与远程分支名相同）：&lt;code>$ git checkout --track 远程仓库名/远程分支名&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在远程分支上创建分支时指定其为远程分支（指定本地分支名）：&lt;code>git checkout -b 本地分支名 远程仓库名/远程分支名&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指定已有的本地分支为莫哥远程分支的跟踪分支：&lt;code>git branch -u 远程仓库名/远程分支名&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="git中的标签">git中的标签
&lt;/h2>&lt;h3 id="什么是标签">什么是标签
&lt;/h3>&lt;ol>
&lt;li>标签的本质：一个指向commit对象的指针，类似于分支，但标签是一个静态指针，不会移动。&lt;/li>
&lt;li>标签的作用：标记一个重要的commit。&lt;/li>
&lt;/ol>
&lt;h3 id="打标签">打标签
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>给当前分支指向的commit打标签&lt;/p>
&lt;ul>
&lt;li>轻量标签：&lt;code>git tag 标签名&lt;/code>&lt;/li>
&lt;li>附注标签：&lt;code>git tag -a 标签名 -m &amp;quot;描述信息&amp;quot;&lt;/code>，相比轻量标签，附注标签可以添加描述信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>给某一次commit打标签：只需要在上面两种打标签的方式最后面添加要打标签的commit的Hash值即可&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看标签&lt;/p>
&lt;ul>
&lt;li>查看有哪些标签&lt;code>git tag&lt;/code>&lt;/li>
&lt;li>查看某一条标签的信息&lt;code>git show 标签名&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Mybatisplus与DataSource</title><link>https://zhaoyifengf.github.io/p/mybatisplus%E4%B8%8Edatasource/</link><pubDate>Mon, 23 Jun 2025 23:26:52 +0800</pubDate><guid>https://zhaoyifengf.github.io/p/mybatisplus%E4%B8%8Edatasource/</guid><description>&lt;h2 id="mybatisplus-sql执行流程">mybatisplus SQL执行流程
&lt;/h2>&lt;h3 id="服务启动时通过自动配置类创建mybatissqlsessionfactorybean">服务启动时通过自动配置类创建MybatisSqlSessionFactoryBean
&lt;/h3>&lt;p>&lt;code>mybatis-plus-boot-starter&lt;/code>包提供了&lt;code>MybatisPlusAutoConfiguration&lt;/code>自动配置类，该自动配置类创建了MybatisSqlSessionFactoryBean对象并交由Spring管理，在创建MybatisSqlSessionFactoryBean时，sqlSessionFactory方法设置了DataScoure对象。自动配置类需要满足以下几个条件才会创建MybatisSqlSessionFactoryBean：&lt;/p>
&lt;ul>
&lt;li>MybatisPlusAutoConfiguration上的@ConditionalOnSingleCandidate指定了：被Spring管理的只有一个DataSource对象或者多个DataSource对指定了优先级（如通过@Primary注解指定）&lt;/li>
&lt;li>sqlSessionFactory方法上@ConditionalOnMissingBean指定了：只有在不存在SqlSessionFactory时才会创建MybatisSqlSessionFactoryBean对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@Configuration(proxyBeanMethods = false)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@ConditionalOnClass({SqlSessionFactory.class, SqlSessionFactoryBean.class})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@ConditionalOnSingleCandidate(DataSource.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@EnableConfigurationProperties(MybatisPlusProperties.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@AutoConfigureAfter({DataSourceAutoConfiguration.class, MybatisPlusLanguageDriverAutoConfiguration.class})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MybatisPlusAutoConfiguration implements InitializingBean {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ConditionalOnMissingBean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // TODO 使用 MybatisSqlSessionFactoryBean 而不是 SqlSessionFactoryBean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MybatisSqlSessionFactoryBean factory = new MybatisSqlSessionFactoryBean();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> factory.setDataSource(dataSource);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="spring对事务进行代理">Spring对事务进行代理
&lt;/h3>&lt;p>执行Mybatisplus DML语句前，Spring对要执行的方法（加了@Transactiontional注解）进行代理，代理执行的逻辑在TransactionAspectSupport中的invokeWithinTransaction方法中。整体调用流程如下&lt;/p>
&lt;p>TransactionInterceptor#invoke -&amp;gt; TransactionAspectSupport#invokeWithinTransaction执行开启事务、执行业务逻辑、提交事务三个步骤。&lt;/p>
&lt;ul>
&lt;li>开启事务
&lt;ul>
&lt;li>TransactionAspectSupport#invokeWithinTransaction -&amp;gt; determineTransactionManager&lt;/li>
&lt;li>TransactionAspectSupport#determineTransactionManager -&amp;gt; createTransactionIfNecessary&lt;/li>
&lt;li>TransactionAspectSupport#createTransactionIfNecessary -&amp;gt; AbstractPlatformTransactionManager#getTransaction，getTransaction方法先尝试获取事务再开启事务：
&lt;ul>
&lt;li>获取事务
&lt;ul>
&lt;li>AbstractPlatformTransactionManager#getTransaction -&amp;gt; DataSourceTransactionManager#doGetTransaction（doGetTransaction是个抽象方法，具体逻辑由实现类提供，我们在这里只讨论DataSourceTransactionManager的实现逻辑）&lt;/li>
&lt;li>DataSourceTransactionManager#doGetTransaction，该方法做下如下操作：
&lt;ul>
&lt;li>创建DataSourceTransactionObject对象&lt;/li>
&lt;li>TransactionSynchronizationManager.getResource方法获取DataSourceTransactionManager中dataScoure对象绑定的ConnectionHolder对象（用来存储connection对象）。TransactionSynchronizationManager中维护了一个ThreadLocal属性resources，这是一个以dataScoure对象为key、ConnectionHolder对象为值的Map。TransactionSynchronizationManager用来管理每个线程中和dataScoure对象绑定的connection对象。&lt;/li>
&lt;li>将上一步获取的ConnectionHolder设置到DataSourceTransactionObject中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>开启事务
&lt;ul>
&lt;li>AbstractPlatformTransactionManager#getTransactio -&amp;gt; DataSourceTransactionManager#startTransaction&lt;/li>
&lt;li>DataSourceTransactionManager#startTransactionn -&amp;gt; doBegin方法，实现如下操作（DataSourceTransactionManager#doGetTransaction对象返回的DataSourceTransactionObject中的ConnectionHolder为空时执行该步骤）：&lt;/li>
&lt;li>通过DataSourceTransactionManager中dataScoure对象获取connection&lt;/li>
&lt;li>将connection包装为ConnectionHolder对象&lt;/li>
&lt;li>通过TransactionSynchronizationManager.bindResource将ConnectionHolder对象和connection对象绑定并设置上面提到的TransactionSynchronizationManager中的ThreadLocal属性resources中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>执行业务逻辑
&lt;ul>
&lt;li>TransactionAspectSupport#invokeWithinTransaction执行被代理方法，mybatisplus中的方法也会在在此被执行，具体流程我们方法下一个部分讨论。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提交事务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">SuppressWarnings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;serial&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">TransactionInterceptor&lt;/span> &lt;span class="k">extends&lt;/span> &lt;span class="n">TransactionAspectSupport&lt;/span> &lt;span class="n">implements&lt;/span> &lt;span class="n">MethodInterceptor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Serializable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="ne">Object&lt;/span> &lt;span class="n">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MethodInvocation&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Work&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="k">class&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">may&lt;/span> &lt;span class="n">be&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">code&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">The&lt;/span> &lt;span class="n">TransactionAttributeSource&lt;/span> &lt;span class="n">should&lt;/span> &lt;span class="n">be&lt;/span> &lt;span class="n">passed&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="k">class&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">well&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">which&lt;/span> &lt;span class="n">may&lt;/span> &lt;span class="n">be&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">an&lt;/span> &lt;span class="n">interface&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">targetClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getThis&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span> &lt;span class="err">?&lt;/span> &lt;span class="n">AopUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTargetClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getThis&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Adapt&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">TransactionAspectSupport&lt;/span>&lt;span class="s1">&amp;#39;s invokeWithinTransaction...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">invokeWithinTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getMethod&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">proceed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="n">abstract&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">TransactionAspectSupport&lt;/span> &lt;span class="n">implements&lt;/span> &lt;span class="n">BeanFactoryAware&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">InitializingBean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">protected&lt;/span> &lt;span class="ne">Object&lt;/span> &lt;span class="n">invokeWithinTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Method&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="n">Nullable&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final&lt;/span> &lt;span class="n">InvocationCallback&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">If&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">transaction&lt;/span> &lt;span class="n">attribute&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">method&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">non&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">transactional&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TransactionAttributeSource&lt;/span> &lt;span class="n">tas&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getTransactionAttributeSource&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final&lt;/span> &lt;span class="n">TransactionAttribute&lt;/span> &lt;span class="n">txAttr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">tas&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span> &lt;span class="err">?&lt;/span> &lt;span class="n">tas&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTransactionAttribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final&lt;/span> &lt;span class="n">TransactionManager&lt;/span> &lt;span class="n">tm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">determineTransactionManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txAttr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">........&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">响应式事务处理逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PlatformTransactionManager&lt;/span> &lt;span class="n">ptm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">asPlatformTransactionManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final&lt;/span> &lt;span class="ne">String&lt;/span> &lt;span class="n">joinpointIdentification&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">methodIdentification&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">txAttr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">txAttr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptm&lt;/span> &lt;span class="n">instanceof&lt;/span> &lt;span class="n">CallbackPreferringPlatformTransactionManager&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Standard&lt;/span> &lt;span class="n">transaction&lt;/span> &lt;span class="n">demarcation&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">getTransaction&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">commit&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">rollback&lt;/span> &lt;span class="n">calls&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TransactionInfo&lt;/span> &lt;span class="n">txInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createTransactionIfNecessary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">txAttr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">joinpointIdentification&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">Object&lt;/span> &lt;span class="n">retVal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">This&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">an&lt;/span> &lt;span class="n">around&lt;/span> &lt;span class="n">advice&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Invoke&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="n">interceptor&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">This&lt;/span> &lt;span class="n">will&lt;/span> &lt;span class="n">normally&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="n">object&lt;/span> &lt;span class="n">being&lt;/span> &lt;span class="n">invoked&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retVal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">invocation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">proceedWithInvocation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="n">invocation&lt;/span> &lt;span class="n">exception&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">completeTransactionAfterThrowing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txInfo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throw&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cleanupTransactionInfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txInfo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">retVal&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">vavrPresent&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">VavrDelegate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isVavrTry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">retVal&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Set&lt;/span> &lt;span class="n">rollback&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">only&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">Vavr&lt;/span> &lt;span class="n">failure&lt;/span> &lt;span class="n">matching&lt;/span> &lt;span class="n">our&lt;/span> &lt;span class="n">rollback&lt;/span> &lt;span class="n">rules&lt;/span>&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TransactionStatus&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">txInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTransactionStatus&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">txAttr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retVal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">VavrDelegate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">evaluateTryFailure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">retVal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">txAttr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commitTransactionAfterReturning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txInfo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">retVal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">......&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">非回调事务处理逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">protected&lt;/span> &lt;span class="n">TransactionInfo&lt;/span> &lt;span class="n">createTransactionIfNecessary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">Nullable&lt;/span> &lt;span class="n">PlatformTransactionManager&lt;/span> &lt;span class="n">tm&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Nullable&lt;/span> &lt;span class="n">TransactionAttribute&lt;/span> &lt;span class="n">txAttr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">final&lt;/span> &lt;span class="ne">String&lt;/span> &lt;span class="n">joinpointIdentification&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...........&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TransactionStatus&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">txAttr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">tm&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">txAttr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...........&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="n">abstract&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">AbstractPlatformTransactionManager&lt;/span> &lt;span class="n">implements&lt;/span> &lt;span class="n">PlatformTransactionManager&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Serializable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">final&lt;/span> &lt;span class="n">TransactionStatus&lt;/span> &lt;span class="n">getTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">Nullable&lt;/span> &lt;span class="n">TransactionDefinition&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throws&lt;/span> &lt;span class="n">TransactionException&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...........................&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">Object&lt;/span> &lt;span class="n">transaction&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">doGetTransaction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">boolean&lt;/span> &lt;span class="n">debugEnabled&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isDebugEnabled&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">No&lt;/span> &lt;span class="n">existing&lt;/span> &lt;span class="n">transaction&lt;/span> &lt;span class="n">found&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">check&lt;/span> &lt;span class="n">propagation&lt;/span> &lt;span class="n">behavior&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">find&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="n">how&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">proceed&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">def&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPropagationBehavior&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TransactionDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PROPAGATION_MANDATORY&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.............&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">def&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPropagationBehavior&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TransactionDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PROPAGATION_REQUIRED&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">def&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPropagationBehavior&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TransactionDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PROPAGATION_REQUIRES_NEW&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">def&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPropagationBehavior&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">TransactionDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PROPAGATION_NESTED&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SuspendedResourcesHolder&lt;/span> &lt;span class="n">suspendedResources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">suspend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...............&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">startTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">def&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">transaction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">debugEnabled&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">suspendedResources&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">RuntimeException&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Error&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.........&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">/**&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span> &lt;span class="n">Start&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">transaction&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">TransactionStatus&lt;/span> &lt;span class="n">startTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TransactionDefinition&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">Object&lt;/span> &lt;span class="n">transaction&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">boolean&lt;/span> &lt;span class="n">debugEnabled&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="n">Nullable&lt;/span> &lt;span class="n">SuspendedResourcesHolder&lt;/span> &lt;span class="n">suspendedResources&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">boolean&lt;/span> &lt;span class="n">newSynchronization&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getTransactionSynchronization&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">SYNCHRONIZATION_NEVER&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DefaultTransactionStatus&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTransactionStatus&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">definition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">transaction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newSynchronization&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">debugEnabled&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">suspendedResources&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">doBegin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">transaction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prepareSynchronization&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">DataSourceTransactionManager&lt;/span> &lt;span class="k">extends&lt;/span> &lt;span class="n">AbstractPlatformTransactionManager&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">implements&lt;/span> &lt;span class="n">ResourceTransactionManager&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">InitializingBean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">protected&lt;/span> &lt;span class="ne">Object&lt;/span> &lt;span class="n">doGetTransaction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DataSourceTransactionObject&lt;/span> &lt;span class="n">txObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">DataSourceTransactionObject&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setSavepointAllowed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">isNestedTransactionAllowed&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConnectionHolder&lt;/span> &lt;span class="n">conHolder&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">ConnectionHolder&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">TransactionSynchronizationManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obtainDataSource&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setConnectionHolder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">conHolder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">txObject&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">protected&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">doBegin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">Object&lt;/span> &lt;span class="n">transaction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TransactionDefinition&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DataSourceTransactionObject&lt;/span> &lt;span class="n">txObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">DataSourceTransactionObject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">transaction&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span> &lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hasConnectionHolder&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnectionHolder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isSynchronizedWithTransaction&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span> &lt;span class="n">newCon&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">obtainDataSource&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnection&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isDebugEnabled&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Acquired Connection [&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">newCon&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;] for JDBC transaction&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setConnectionHolder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="n">ConnectionHolder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newCon&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="bp">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnectionHolder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setSynchronizedWithTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">con&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnectionHolder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnection&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Integer&lt;/span> &lt;span class="n">previousIsolationLevel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DataSourceUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prepareConnectionForTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">con&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setPreviousIsolationLevel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">previousIsolationLevel&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setReadOnly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">definition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isReadOnly&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Switch&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">manual&lt;/span> &lt;span class="n">commit&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">necessary&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">This&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">very&lt;/span> &lt;span class="n">expensive&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">some&lt;/span> &lt;span class="n">JDBC&lt;/span> &lt;span class="n">drivers&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">so&lt;/span> &lt;span class="n">we&lt;/span> &lt;span class="n">don&lt;/span>&lt;span class="s1">&amp;#39;t want to do it unnecessarily (for example if we&amp;#39;&lt;/span>&lt;span class="n">ve&lt;/span> &lt;span class="n">explicitly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">configured&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">connection&lt;/span> &lt;span class="n">pool&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">set&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="n">already&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getAutoCommit&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setMustRestoreAutoCommit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isDebugEnabled&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Switching JDBC Connection [&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">con&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;] to manual commit&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">con&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setAutoCommit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prepareTransactionalConnection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">con&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnectionHolder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setTransactionActive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">determineTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">definition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">TransactionDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TIMEOUT_DEFAULT&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnectionHolder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setTimeoutInSeconds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Bind&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">connection&lt;/span> &lt;span class="n">holder&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isNewConnectionHolder&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TransactionSynchronizationManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bindResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obtainDataSource&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnectionHolder&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isNewConnectionHolder&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DataSourceUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">releaseConnection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">con&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obtainDataSource&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">txObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setConnectionHolder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throw&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">CannotCreateTransactionException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Could not open JDBC Connection for transaction&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="执行mybatisplus-dml与select语句">执行mybatisplus DML与Select语句
&lt;/h2>&lt;p>以调用IService的saveBatch方法为例，其最初调用链路如下ServiceImpl#saveBatch -&amp;gt; ServiceImpl#executeBatch -&amp;gt; SqlHelper#executeBatch，
执行步骤如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>获取SqlSessionFactory&lt;/p>
&lt;p>SqlHelper#executeBatch调用sqlSessionFactory方法，sqlSessionFactory对象中持有DataSource对象的引用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用上面一步获取的SqlSessionFactory的openSession方法（这里以DefaultSqlSessionFactory加以说明），需要注意的事这里的Transaction对象并不参与事务的执行，只是用来管理数据源，该方法执行了如下步骤：&lt;/p>
&lt;ul>
&lt;li>创建TransactionFactory对象&lt;/li>
&lt;li>通过TransactionFactory对象创建Transaction对象，并传入从configure（SqlSessionFactory持有）对象中获取的dataScoure对象&lt;/li>
&lt;li>创建Executor对象并传入Transaction对象&lt;/li>
&lt;li>创建DefaultSqlSession对象并传入Executor对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Transaction tx = null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> try {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final Environment environment = configuration.getEnvironment();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final Executor executor = configuration.newExecutor(tx, execType);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return new DefaultSqlSession(configuration, executor, autoCommit);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } catch (Exception e) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> closeTransaction(tx); // may have fetched a connection so lets call close()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> throw ExceptionFactory.wrapException(&amp;#34;Error opening session. Cause: &amp;#34; + e, e);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } finally {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ErrorContext.instance().reset();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>调用SqlSession的insert方法&lt;/p>
&lt;ul>
&lt;li>调用链路SqlSession#insert -&amp;gt; SqlSession#update -&amp;gt; BaseExecutor#update -&amp;gt; BatchExecutor#doUpdate，BatchExecutor#doUpdate执行了如下步骤：
&lt;ul>
&lt;li>获取Connection，调用BaseExecutor#getConnection -&amp;gt; Transaction.getConnection -&amp;gt; SpringManagedTransaction.getConnection -&amp;gt; SpringManagedTransaction.openConnection -&amp;gt; DataSourceUtils.getConnection -&amp;gt; DataSourceUtils.doGetConnection，从下面的代码可知道如果当前数据源绑定了Connection则获取绑定的Connection，如果没有绑定则调用DataScoure对象的getConnection方法获取新的connection方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public static Connection doGetConnection(DataSource dataSource) throws SQLException {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (conHolder != null &amp;amp;&amp;amp; (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> conHolder.requested();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (!conHolder.hasConnection()) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> logger.debug(&amp;#34;Fetching resumed JDBC Connection from DataSource&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> conHolder.setConnection(fetchConnection(dataSource));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return conHolder.getConnection();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Else we either got no holder or an empty thread-bound holder here.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> logger.debug(&amp;#34;Fetching JDBC Connection from DataSource&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Connection con = fetchConnection(dataSource);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ........
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return con;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private static Connection fetchConnection(DataSource dataSource) throws SQLException {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Connection con = dataSource.getConnection();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (con == null) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> throw new IllegalStateException(&amp;#34;DataSource returned null from getConnection(): &amp;#34; + dataSource);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return con;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>准备Statement，设置Connection为上一步获取的Connection&lt;/li>
&lt;li>执行SQL语句&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="datascoure数据库链接的管理者">DataScoure：数据库链接的管理者
&lt;/h2>&lt;p>不论是在Spring事务还是mybatisplus执行SQL语句前获取connection，都会调用DataScoure#getConnection方法。如下，DataScoure只提供了两个获取connection方法，由此可知DataScoure最主要的功能就是进行Connection的管理。对DataSource的getConnection方法提供不同的实现可以提供不同的功能，最典型的莫过于连接池和动态数据源。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="n">interface&lt;/span> &lt;span class="n">DataSource&lt;/span> &lt;span class="k">extends&lt;/span> &lt;span class="n">CommonDataSource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Wrapper&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span> &lt;span class="n">getConnection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="n">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span> &lt;span class="n">getConnection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="连接池">连接池
&lt;/h3>&lt;p>我们以HikariCP为例，先介绍其在SpringBoot项目中如何使用，再介绍如何通过其获取Connection&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SpringBoot集成HikariCP&lt;/p>
&lt;ul>
&lt;li>yaml配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">spring:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> datasource:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> type: com.zaxxer.hikari.HikariDataSource
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> url: jdbc:mysql://localhost:3306/test?useSSL=false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: 123456
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> driver-class-name: com.mysql.cj.jdbc.Driver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hikari:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pool-name: MyHikariCP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minimum-idle: 5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> maximum-pool-size: 20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> idle-timeout: 600000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> max-lifetime: 1800000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> connection-timeout: 30000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> connection-test-query: SELECT 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>数据源属性类&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">ConfigurationProperties&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;spring.datasource&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">DataSourceProperties&lt;/span> &lt;span class="n">implements&lt;/span> &lt;span class="n">BeanClassLoaderAware&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">InitializingBean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">ClassLoader&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="ne">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">boolean&lt;/span> &lt;span class="n">generateUniqueName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">?&lt;/span> &lt;span class="k">extends&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="ne">String&lt;/span> &lt;span class="n">driverClassName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="ne">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="ne">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="ne">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>Springboot自动配置&lt;/p>
&lt;p>当我们在yaml文件中指定了&lt;code>type: com.zaxxer.hikari.HikariDataSource&lt;/code>满足了自动配置类&lt;code>@ConditionalOnProperty(name = &amp;quot;spring.datasource.type&amp;quot;, havingValue = &amp;quot;com.zaxxer.hikari.HikariDataSource&amp;quot;,matchIfMissing = true)&lt;/code>的条件，创建HikariDataSource对象并交由Spring管理。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">stract class DataSourceConfiguration {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Configuration(proxyBeanMethods = false)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ConditionalOnClass(HikariDataSource.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ConditionalOnMissingBean(DataSource.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ConditionalOnProperty(name = &amp;#34;spring.datasource.type&amp;#34;, havingValue = &amp;#34;com.zaxxer.hikari.HikariDataSource&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> matchIfMissing = true)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static class Hikari {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ConfigurationProperties(prefix = &amp;#34;spring.datasource.hikari&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HikariDataSource dataSource(DataSourceProperties properties) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (StringUtils.hasText(properties.getName())) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dataSource.setPoolName(properties.getName());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return dataSource;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>HikariDataSource实现数据库链接管理
在没有创建其他数据源的情况下，HikariDataSource会被注入Mybatisplus的MybatisSqlSessionFactoryBean并在执行SQL语句前被获取，HikariDataSource只需要重写getConnection方法就可实现对数据库连接的管理。如下代码，HikariDataSource获取数据库连接的功能最终委托给了HikariPool。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">HikariDataSource&lt;/span> &lt;span class="k">extends&lt;/span> &lt;span class="n">HikariConfig&lt;/span> &lt;span class="n">implements&lt;/span> &lt;span class="n">DataSource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Closeable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">LOGGER&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">HikariDataSource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">final&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span> &lt;span class="n">isShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">AtomicBoolean&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">final&lt;/span> &lt;span class="n">HikariPool&lt;/span> &lt;span class="n">fastPathPool&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">volatile&lt;/span> &lt;span class="n">HikariPool&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">HikariDataSource&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">super&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fastPathPool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">HikariDataSource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">HikariConfig&lt;/span> &lt;span class="n">configuration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">validate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copyStateTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LOGGER&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;{} - Starting...&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPoolName&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fastPathPool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">HikariPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LOGGER&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;{} - Start completed.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getPoolName&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seal&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">Connection&lt;/span> &lt;span class="n">getConnection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="n">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isClosed&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throw&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;HikariDataSource &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; has been closed.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fastPathPool&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fastPathPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnection&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">See&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">en&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wikipedia&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">org&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">wiki&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">checked_locking&lt;/span>&lt;span class="c1">#Usage_in_Java&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HikariPool&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">synchronized&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">validate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LOGGER&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;{} - Starting...&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">getPoolName&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">HikariPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seal&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PoolInitializationException&lt;/span> &lt;span class="n">pie&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pie&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getCause&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="n">instanceof&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throw&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">SQLException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">pie&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getCause&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throw&lt;/span> &lt;span class="n">pie&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LOGGER&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;{} - Start completed.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">getPoolName&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConnection&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>HikariPool核心代码如下，&lt;/p>
&lt;/li>
&lt;/ul>
&lt;img src="HikariDataSource.svg" width="90%" height="90%">
&lt;h3 id="动态数据源-待补充">动态数据源 (待补充)
&lt;/h3>&lt;h4 id="编译时动态">编译时动态
&lt;/h4>&lt;h4 id="运行时动态">运行时动态
&lt;/h4>&lt;h2 id="mybatisplus-执行-sql时数据源问题总结">mybatisplus 执行 SQL时数据源问题总结
&lt;/h2>&lt;ul>
&lt;li>数据源DataScoure是一个管理数据库连接的对象，它与数据库连接是一对多的关联&lt;/li>
&lt;li>mybatisplus的数据源对象取自SqlSessionFactory对象，在满足第一节Mybatisplus自动配置MybatisSqlSessionFactoryBean的条件下，mybatisplus获取的是优先级最高的（加了@Primary）DataScoure对象&lt;/li>
&lt;li>指定事务管理器的数据源只会影响@Transactional注解绑定Datasource对象和Connection方法的逻辑，并不会影响mybatisplus实际获取的数据源（mybatisplus从SqlSessionFactory中取数据源）&lt;/li>
&lt;/ul></description></item><item><title>Archives</title><link>https://zhaoyifengf.github.io/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://zhaoyifengf.github.io/archives/</guid><description/></item><item><title>Links</title><link>https://zhaoyifengf.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhaoyifengf.github.io/links/</guid><description>&lt;p>To use this feature, add &lt;code>links&lt;/code> section to frontmatter.&lt;/p>
&lt;p>This page&amp;rsquo;s frontmatter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">links&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub is the world&amp;#39;s largest software development platform.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://www.typescriptlang.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ts-logo-128.jpg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>image&lt;/code> field accepts both local and external images.&lt;/p></description></item><item><title>Search</title><link>https://zhaoyifengf.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhaoyifengf.github.io/search/</guid><description/></item></channel></rss>